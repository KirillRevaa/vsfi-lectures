(function (Opal) {
  function initialize (Opal) {
/* Generated by Opal 0.11.99.dev */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $nesting = [self].concat($parent_nesting), $JSON_$$$1, $JSON_parse$2, $JSON_parse$excl$3, $JSON_load$4, $JSON_from_object$5, $JSON_generate$6, $JSON_dump$7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'JSONError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParserError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($$($nesting, 'JSON').$create_id())) != nil) {
              return $$$('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', $JSON_$$$1 = function(value, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy($$($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, $JSON_$$$1.$$arity = -2);
    Opal.defs(self, '$parse', $JSON_parse$2 = function $$parse(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, $JSON_parse$2.$$arity = -2);
    Opal.defs(self, '$parse!', $JSON_parse$excl$3 = function(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$parse(source, options);
    }, $JSON_parse$excl$3.$$arity = -2);
    Opal.defs(self, '$load', $JSON_load$4 = function $$load(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options);
    }, $JSON_load$4.$$arity = -2);
    Opal.defs(self, '$from_object', $JSON_from_object$5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", $$($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", $$($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);;
    }, $JSON_from_object$5.$$arity = -2);
    Opal.defs(self, '$generate', $JSON_generate$6 = function $$generate(obj, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return obj.$to_json(options);
    }, $JSON_generate$6.$$arity = -2);
    Opal.defs(self, '$dump', $JSON_dump$7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      
      if (io == null) {
        io = nil;
      };
      
      if (limit == null) {
        limit = nil;
      };
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, $JSON_dump$7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_to_json$8;

    return (Opal.def(self, '$to_json', $Object_to_json$8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Object_to_json$8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_json$9;

    
    Opal.def(self, '$to_json', $Enumerable_to_json$9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, $Enumerable_to_json$9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_json$10;

    return (Opal.def(self, '$to_json', $Array_to_json$10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, $Array_to_json$10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_json$11;

    return (Opal.def(self, '$to_json', $Boolean_to_json$11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, $Boolean_to_json$11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_to_json$12;

    return (Opal.def(self, '$to_json', $Hash_to_json$12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, $Hash_to_json$12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_json$13;

    return (Opal.def(self, '$to_json', $NilClass_to_json$13 = function $$to_json() {
      var self = this;

      return "null"
    }, $NilClass_to_json$13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_json$14;

    return (Opal.def(self, '$to_json', $Numeric_to_json$14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, $Numeric_to_json$14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_json$15;

    return (Opal.def(self, '$to_json', $Time_to_json$15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, $Time_to_json$15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $Date_to_json$16, $Date_as_json$17;

    
    
    Opal.def(self, '$to_json', $Date_to_json$16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Date_to_json$16.$$arity = 0);
    return (Opal.def(self, '$as_json', $Date_as_json$17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, $Date_as_json$17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$require', '$nil?', '$option?', '$include?', '$join', '$map', '$split', '$!=', '$to_s', '$attr?', '$downcase', '$attr', '$inject', '$!', '$nil_or_empty?', '$is_a?', '$compact', '$<<', '$empty?', '$+', '$select', '$to_h', '$start_with?', '$data_attrs', '$role', '$roles', '$html_tag', '$merge', '$level', '$special', '$parent', '$instance_of?', '$object_id', '$[]', '$length', '$attributes', '$new', '$context', '$text', '$id', '$[]=', '$-', '$index', '$values', '$to_i', '$document', '$numbered', '$caption', '$<=', '$sectnum', '$captioned_title', '$content', '$lambda', '$key?', '$fetch', '$delete', '$call', '$authors', '$format_author', '$first', '$each', '$in_context', '$sub_replacements', '$name', '$email', '$sub_macros', '$push', '$pop', '$generate', '$constants', '$const_set', '$const_get', '$register_for', '$respond_to?', '$basebackend', '$outfilesuffix', '$filetype', '$supports_templates', '$create', '$backend_info', '$node_name', '$send', '$extend', '$instance_eval', '$set_local_variables', '$converter', '$binding', '$===', '$inline_text_container', '$has_role?', '$resolve_content', '$title?', '$title', '$sections', '$section_level', '$section_title', '$<', '$convert', '$*', '$media_uri', '$slide_footnote', '$bool_data_attr', '$image_uri', '$flatten', '$map!', '$to_proc', '$reject!', '$icon_uri', '$to_sym', '$strip', '$sub_specialcharacters', '$end_with?', '$items', '$blocks?', '$each_with_index', '$tr_s', '$references', '$style', '$text?', '$chomp', '$last', '$syntax_highlighter', '$highlight?', '$reject', '$format', '$find_by', '$blocks', '$content_for', '$slide_footnotes', '$footnotes?', '$yield_content', '$clear_slide_footnotes', '$>=', '$zero?', '$colspan', '$rowspan', '$noheader', '$docinfo', '$header?', '$subtitle?', '$doctitle', '$slice_text', '$header', '$subtitle', '$generate_authors', '$extname', '$slice', '$normalize_web_path', '$generate_stem', '$docinfo?', '$to_boolean', '$to_valid_slidenumber', '$revealjs_dependencies', '$doctype', '$puts', '$size', '$notitle', '$has_header?', '$footnotes', '$list_marker_keyword', '$local_variable_set']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      nil
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Converter');

    var $nesting = [self].concat($parent_nesting), $Converter$30, $Converter_initialize$31, $Converter_convert$32, $Converter_handles$ques$33, $Converter_inline_quoted$34, $Converter_pass$36, $Converter_sidebar$38, $Converter_thematic_break$41, $Converter_outline$43, $Converter_inline_break$46, $Converter_video$48, $Converter_inline_footnote$51, $Converter_stretch_nested_elements$55, $Converter_image$57, $Converter_admonition$60, $Converter_ruler$63, $Converter_page_break$65, $Converter_stem$67, $Converter_toc$70, $Converter_ulist$72, $Converter_inline_indexterm$76, $Converter_inline_menu$78, $Converter_colist$84, $Converter_inline_anchor$89, $Converter_floating_title$93, $Converter_quote$95, $Converter_dlist$98, $Converter_example$109, $Converter_listing$112, $Converter_inline_callout$116, $Converter_section$118, $Converter_inline_button$128, $Converter_table$131, $Converter_document$143, $Converter_literal$147, $Converter_verse$150, $Converter_audio$153, $Converter_inline_image$156, $Converter_notes$159, $Converter_open$161, $Converter_preamble$165, $Converter_inline_kbd$167, $Converter_title_slide$172, $Converter_embedded$174, $Converter_paragraph$177, $Converter_olist$180, $Converter_set_local_variables$184;

    self.$$prototype.delegate_converter = nil;
    
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
      nil
    };
    self.$require("json");
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $Helpers_slice_text$1, $Helpers_to_boolean$3, $Helpers_bool_data_attr$4, $Helpers_to_valid_slidenumber$5, $Helpers_html_tag$6, $Helpers_data_attrs$8, $Helpers_inline_text_container$11, $Helpers_section_level$12, $Helpers_slide_footnote$13, $Helpers_clear_slide_footnotes$14, $Helpers_slide_footnotes$15, $Helpers_section_title$16, $Helpers_revealjs_dependencies$17, $Helpers_resolve_content$18, $Helpers_content_for$19, $Helpers_content_for$ques$21, $Helpers_yield_content$22, $Helpers_generate_authors$24, $Helpers_format_author$26, $Helpers_in_context$28, $Helpers_generate_stem$29;

      
      Opal.const_set($nesting[0], 'EOL', "\n");
      Opal.const_set($nesting[0], 'SliceHintRx', /  +/);
      
      Opal.def(self, '$slice_text', $Helpers_slice_text$1 = function $$slice_text(str, active) {
        var $a, $b, $c, $$2, self = this;

        
        
        if (active == null) {
          active = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = active) ? $b : ($truthy($c = active['$nil?']()) ? self['$option?']("slice") : $c))) ? str['$include?']("  ") : $a))) {
          return $send(str.$split($$($nesting, 'SliceHintRx')), 'map', [], ($$2 = function(line){var self = $$2.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            return "" + "<span class=\"line\">" + (line) + "</span>";}, $$2.$$s = self, $$2.$$arity = 1, $$2)).$join($$($nesting, 'EOL'))
        } else {
          return str
        };
      }, $Helpers_slice_text$1.$$arity = -2);
      
      Opal.def(self, '$to_boolean', $Helpers_to_boolean$3 = function $$to_boolean(val) {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = val) ? val['$!=']("false") : $c)) ? val.$to_s()['$!=']("0") : $b)) ? $a : false)
      }, $Helpers_to_boolean$3.$$arity = 1);
      
      Opal.def(self, '$bool_data_attr', $Helpers_bool_data_attr$4 = function $$bool_data_attr(val) {
        var $a, self = this;

        
        if ($truthy(self['$attr?'](val))) {
        } else {
          return false
        };
        if ($truthy(($truthy($a = self.$attr(val).$downcase()['$==']("false")) ? $a : self.$attr(val)['$==']("0")))) {
          return "false"
        } else {
          return true
        };
      }, $Helpers_bool_data_attr$4.$$arity = 1);
      
      Opal.def(self, '$to_valid_slidenumber', $Helpers_to_valid_slidenumber$5 = function $$to_valid_slidenumber(val) {
        var self = this;

        
        if (val['$==']("")) {
          return true};
        if (val.$to_s()['$==']("false")) {
          return false
        } else {
          return "" + "'" + (val) + "'"
        };
      }, $Helpers_to_valid_slidenumber$5.$$arity = 1);
      Opal.const_set($nesting[0], 'DEFAULT_TOCLEVELS', 2);
      Opal.const_set($nesting[0], 'DEFAULT_SECTNUMLEVELS', 3);
      Opal.const_set($nesting[0], 'VOID_ELEMENTS', ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
      
      Opal.def(self, '$html_tag', $Helpers_html_tag$6 = function $$html_tag(name, attributes, content) {
        var $$7, $a, $iter = $Helpers_html_tag$6.$$p, $yield = $iter || nil, self = this, attrs = nil, attrs_str = nil;

        if ($iter) $Helpers_html_tag$6.$$p = null;
        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (content == null) {
          content = nil;
        };
        attrs = $send(attributes, 'inject', [[]], ($$7 = function(attrs, $mlhs_tmp1){var self = $$7.$$s || this, $a, $b, k = nil, v = nil;

        
          
          if (attrs == null) {
            attrs = nil;
          };
          
          if ($mlhs_tmp1 == null) {
            $mlhs_tmp1 = nil;
          };
          $b = $mlhs_tmp1, $a = Opal.to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(($truthy($a = v) ? ($truthy($b = v['$=='](true)) ? $b : v['$nil_or_empty?']()['$!']()) : $a))) {
          } else {
            return attrs;
          };
          if ($truthy(v['$is_a?']($$($nesting, 'Array')))) {
            v = v.$compact().$join(" ")};
          return attrs['$<<']((function() {if (v['$=='](true)) {
            return k
          } else {
            return "" + (k) + "=\"" + (v) + "\""
          }; return nil; })());}, $$7.$$s = self, $$7.$$arity = 2, $$7.$$has_top_level_mlhs_arg = true, $$7));
        attrs_str = (function() {if ($truthy(attrs['$empty?']())) {
          return ""
        } else {
          return $rb_plus(" ", attrs.$join(" "))
        }; return nil; })();
        if ($truthy($$($nesting, 'VOID_ELEMENTS')['$include?'](name.$to_s()))) {
          return "" + "<" + (name) + (attrs_str) + ">"
        } else {
          
          content = ($truthy($a = content) ? $a : (function() {if (($yield !== nil)) {
            return Opal.yieldX($yield, []);
          } else {
            return nil
          }; return nil; })());
          return "" + "<" + (name) + (attrs_str) + ">" + (content) + "</" + (name) + ">";
        };
      }, $Helpers_html_tag$6.$$arity = -2);
      
      Opal.def(self, '$data_attrs', $Helpers_data_attrs$8 = function $$data_attrs(attributes) {
        var $$9, $$10, self = this;

        return $send($send(attributes, 'map', [], ($$9 = function(key, value){var self = $$9.$$s || this;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          if ($truthy(key['$==']("step"))) {
            return ["data-fragment-index", value]
          } else {
            return [key, value]
          };}, $$9.$$s = self, $$9.$$arity = 2, $$9)).$to_h(), 'select', [], ($$10 = function(key, _){var self = $$10.$$s || this;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (_ == null) {
            _ = nil;
          };
          return key.$to_s()['$start_with?']("data-");}, $$10.$$s = self, $$10.$$arity = 2, $$10))
      }, $Helpers_data_attrs$8.$$arity = 1);
      
      Opal.def(self, '$inline_text_container', $Helpers_inline_text_container$11 = function $$inline_text_container(content) {
        var $a, $b, $iter = $Helpers_inline_text_container$11.$$p, $yield = $iter || nil, self = this, data_attrs = nil, classes = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.id == null) self.id = nil;

        if ($iter) $Helpers_inline_text_container$11.$$p = null;
        
        
        if (content == null) {
          content = nil;
        };
        data_attrs = self.$data_attrs(self.attributes);
        classes = [self.$role(), (function() {if ($truthy(($truthy($a = ($truthy($b = self['$option?']("step")) ? $b : self['$attr?']("step"))) ? $a : self.$roles()['$include?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()].$compact();
        if ($truthy(($truthy($a = ($truthy($b = self.$roles()['$empty?']()['$!']()) ? $b : data_attrs['$empty?']()['$!']())) ? $a : self.id['$nil?']()['$!']()))) {
          return self.$html_tag("span", $hash2(["id", "class"], {"id": self.id, "class": classes}).$merge(data_attrs), ($truthy($a = content) ? $a : (function() {if (($yield !== nil)) {
            return Opal.yieldX($yield, []);
          } else {
            return nil
          }; return nil; })()))
        } else {
          return ($truthy($a = content) ? $a : (function() {if (($yield !== nil)) {
            return Opal.yieldX($yield, []);
          } else {
            return nil
          }; return nil; })())
        };
      }, $Helpers_inline_text_container$11.$$arity = -1);
      
      Opal.def(self, '$section_level', $Helpers_section_level$12 = function $$section_level(sec) {
        var $a, $b, self = this;
        if (self._section_level == null) self._section_level = nil;

        
        
        if (sec == null) {
          sec = self;
        };
        return (self._section_level = ($truthy($a = self._section_level) ? $a : (function() {if ($truthy((($b = sec.$level()['$=='](0)) ? sec.$special() : sec.$level()['$=='](0)))) {
          return 1
        } else {
          return sec.$level()
        }; return nil; })()));
      }, $Helpers_section_level$12.$$arity = -1);
      (Opal.class_variable_set($nesting[0], '@@slide_footnotes', $hash2([], {})));
      (Opal.class_variable_set($nesting[0], '@@section_footnotes', $hash2([], {})));
      
      Opal.def(self, '$slide_footnote', $Helpers_slide_footnote$13 = function $$slide_footnote(footnote) {
        var $a, $b, self = this, footnote_parent = nil, footnote_parent_object_id = nil, section_footnotes = nil, footnote_index = nil, attributes = nil, inline_footnote = nil, $writer = nil, parent = nil, initial_index = nil, slide_index = nil, existing_footnote = nil;

        
        footnote_parent = footnote.$parent();
        if ($truthy(footnote_parent['$instance_of?']($$$($$$('::', 'Asciidoctor'), 'Section')))) {
          
          footnote_parent_object_id = footnote_parent.$object_id();
          section_footnotes = ($truthy($a = (($b = $nesting[0].$$cvars['@@section_footnotes']) == null ? nil : $b)['$[]'](footnote_parent_object_id)) ? $a : []);
          footnote_index = $rb_plus(section_footnotes.$length(), 1);
          attributes = footnote.$attributes().$merge($hash2(["index"], {"index": footnote_index}));
          inline_footnote = $$$($$($nesting, 'Asciidoctor'), 'Inline').$new(footnote_parent, footnote.$context(), footnote.$text(), $hash2(["attributes"], {"attributes": attributes}));
          section_footnotes['$<<']($$$($$$($$($nesting, 'Asciidoctor'), 'Document'), 'Footnote').$new(inline_footnote.$attr("index"), inline_footnote.$id(), inline_footnote.$text()));
          
          $writer = [footnote_parent_object_id, section_footnotes];
          $send((($a = $nesting[0].$$cvars['@@section_footnotes']) == null ? nil : $a), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return inline_footnote;
        } else {
          
          parent = footnote.$parent();
          while (!($truthy(($truthy($b = parent['$=='](nil)) ? $b : parent['$instance_of?']($$$($$$('::', 'Asciidoctor'), 'Section')))))) {
            parent = parent.$parent()
          };
          section_footnotes = (function() {if ($truthy(parent['$!='](nil))) {
            return ($truthy($a = (($b = $nesting[0].$$cvars['@@section_footnotes']) == null ? nil : $b)['$[]'](parent.$object_id())) ? $a : [])
          } else {
            return []
          }; return nil; })();
          initial_index = footnote.$attr("index");
          slide_index = (function() {if ($truthy((existing_footnote = (($a = $nesting[0].$$cvars['@@slide_footnotes']) == null ? nil : $a)['$[]'](initial_index)))) {
            return existing_footnote.$index()
          } else {
            return $rb_plus($rb_plus((($a = $nesting[0].$$cvars['@@slide_footnotes']) == null ? nil : $a).$length(), section_footnotes.$length()), 1)
          }; return nil; })();
          attributes = footnote.$attributes().$merge($hash2(["index"], {"index": slide_index}));
          inline_footnote = $$$($$($nesting, 'Asciidoctor'), 'Inline').$new(footnote_parent, footnote.$context(), footnote.$text(), $hash2(["attributes"], {"attributes": attributes}));
          
          $writer = [initial_index, $$$($$$($$($nesting, 'Asciidoctor'), 'Document'), 'Footnote').$new(inline_footnote.$attr("index"), inline_footnote.$id(), inline_footnote.$text())];
          $send((($a = $nesting[0].$$cvars['@@slide_footnotes']) == null ? nil : $a), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return inline_footnote;
        };
      }, $Helpers_slide_footnote$13.$$arity = 1);
      
      Opal.def(self, '$clear_slide_footnotes', $Helpers_clear_slide_footnotes$14 = function $$clear_slide_footnotes() {
        var self = this;

        return (Opal.class_variable_set($nesting[0], '@@slide_footnotes', $hash2([], {})))
      }, $Helpers_clear_slide_footnotes$14.$$arity = 0);
      
      Opal.def(self, '$slide_footnotes', $Helpers_slide_footnotes$15 = function $$slide_footnotes(section) {
        var $a, $b, self = this, section_object_id = nil, section_footnotes = nil;

        
        section_object_id = section.$object_id();
        section_footnotes = ($truthy($a = (($b = $nesting[0].$$cvars['@@section_footnotes']) == null ? nil : $b)['$[]'](section_object_id)) ? $a : []);
        return $rb_plus(section_footnotes, (($a = $nesting[0].$$cvars['@@slide_footnotes']) == null ? nil : $a).$values());
      }, $Helpers_slide_footnotes$15.$$arity = 1);
      
      Opal.def(self, '$section_title', $Helpers_section_title$16 = function $$section_title(sec) {
        var $a, $b, self = this, sectnumlevels = nil;

        
        
        if (sec == null) {
          sec = self;
        };
        sectnumlevels = self.$document().$attr("sectnumlevels", $$($nesting, 'DEFAULT_SECTNUMLEVELS')).$to_i();
        if ($truthy(($truthy($a = ($truthy($b = sec.$numbered()) ? sec.$caption()['$!']() : $b)) ? $rb_le(sec.$level(), sectnumlevels) : $a))) {
          return [sec.$sectnum(), sec.$captioned_title()].$join(" ")
        } else {
          return sec.$captioned_title()
        };
      }, $Helpers_section_title$16.$$arity = -1);
      
      Opal.def(self, '$revealjs_dependencies', $Helpers_revealjs_dependencies$17 = function $$revealjs_dependencies(document, node, revealjsdir) {
        var self = this, dependencies = nil;

        
        dependencies = [];
        if ($truthy(node['$attr?']("revealjs_plugin_zoom", "disabled"))) {
        } else {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/zoom/zoom.js', async: true, callback: function () { Reveal.registerPlugin(RevealZoom) } }")
        };
        if ($truthy(node['$attr?']("revealjs_plugin_notes", "disabled"))) {
        } else {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/notes/notes.js', async: true, callback: function () { Reveal.registerPlugin(RevealNotes) } }")
        };
        if ($truthy(node['$attr?']("revealjs_plugin_search", "enabled"))) {
          dependencies['$<<']("" + "{ src: '" + (revealjsdir) + "/plugin/search/search.js', async: true, callback: function () { Reveal.registerPlugin(RevealSearch) } }")};
        return dependencies.$join(",\n      ");
      }, $Helpers_revealjs_dependencies$17.$$arity = 3);
      
      Opal.def(self, '$resolve_content', $Helpers_resolve_content$18 = function $$resolve_content() {
        var self = this;
        if (self.content_model == null) self.content_model = nil;

        if (self.content_model['$==']("simple")) {
          return "" + "<p>" + (self.$content()) + "</p>"
        } else {
          return self.$content()
        }
      }, $Helpers_resolve_content$18.$$arity = 0);
      
      Opal.def(self, '$content_for', $Helpers_content_for$19 = function $$content_for(key, opts) {
        var $iter = $Helpers_content_for$19.$$p, block = $iter || nil, $a, $b, $$20, self = this, $writer = nil;
        if (self.content == null) self.content = nil;

        if ($iter) $Helpers_content_for$19.$$p = null;
        
        
        if ($iter) $Helpers_content_for$19.$$p = null;;
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy((($a = self['content'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.content = $hash2([], {})
        };
        (function() {if ($truthy(opts['$[]']("append"))) {
          
          return ($truthy($b = self.content['$[]'](key)) ? $b : (($writer = [key, []]), $send(self.content, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        } else {
          
          
          $writer = [key, []];
          $send(self.content, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }; return nil; })()['$<<']((function() {if ((block !== nil)) {
          return block
        } else {
          return $send(self, 'lambda', [], ($$20 = function(){var self = $$20.$$s || this;

          return opts['$[]']("content")}, $$20.$$s = self, $$20.$$arity = 0, $$20))
        }; return nil; })());
        return nil;
      }, $Helpers_content_for$19.$$arity = -2);
      
      Opal.def(self, '$content_for?', $Helpers_content_for$ques$21 = function(key) {
        var $a, $b, self = this;
        if (self.content == null) self.content = nil;

        return ($truthy($a = (($b = self['content'], $b != null && $b !== nil) ? 'instance-variable' : nil)) ? self.content['$key?'](key) : $a)
      }, $Helpers_content_for$ques$21.$$arity = 1);
      
      Opal.def(self, '$yield_content', $Helpers_yield_content$22 = function $$yield_content(key, opts) {
        var $a, $b, $$23, self = this, blks = nil;
        if (self.content == null) self.content = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(($truthy($a = (($b = self['content'], $b != null && $b !== nil) ? 'instance-variable' : nil)) ? (blks = (function() {if ($truthy(opts.$fetch("drain", true))) {
          
          return self.content.$delete(key);
        } else {
          return self.content['$[]'](key)
        }; return nil; })()) : $a))) {
          $send(blks, 'map', [], ($$23 = function(b){var self = $$23.$$s || this;

          
            
            if (b == null) {
              b = nil;
            };
            return b.$call();}, $$23.$$s = self, $$23.$$arity = 1, $$23)).$join()};
        return nil;
      }, $Helpers_yield_content$22.$$arity = -2);
      
      Opal.def(self, '$generate_authors', $Helpers_generate_authors$24 = function $$generate_authors(node) {
        var $$25, self = this, result = nil;

        
        if ($truthy(node.$authors()['$empty?']())) {
          return nil};
        if (node.$authors().$length()['$=='](1)) {
          return "" + "<p class=\"byline\">\n" + "  " + (self.$format_author(node, node.$authors().$first())) + "\n" + "  </p>"
        } else {
          
          result = ["<ul class=\"byline\">"];
          $send(node.$authors(), 'each', [], ($$25 = function(author){var self = $$25.$$s || this;

          
            
            if (author == null) {
              author = nil;
            };
            return result['$<<']("" + "<li>" + (self.$format_author(node, author)) + "</li>");}, $$25.$$s = self, $$25.$$arity = 1, $$25));
          result['$<<']("</ul>");
          return result.$join($$$($$($nesting, 'Asciidoctor'), 'LF'));
        };
      }, $Helpers_generate_authors$24.$$arity = 1);
      
      Opal.def(self, '$format_author', $Helpers_format_author$26 = function $$format_author(node, author) {
        var $$27, self = this;

        return $send(self, 'in_context', ["author"], ($$27 = function(){var self = $$27.$$s || this;

        return "" + "<span class=\"author\">" + (node.$sub_replacements(author.$name())) + ((function() {if ($truthy(author.$email())) {
            return "" + " " + (node.$sub_macros(author.$email()))
          } else {
            return ""
          }; return nil; })()) + "</span>"}, $$27.$$s = self, $$27.$$arity = 0, $$27))
      }, $Helpers_format_author$26.$$arity = 2);
      
      Opal.def(self, '$in_context', $Helpers_in_context$28 = function $$in_context(name) {
        var $a, $iter = $Helpers_in_context$28.$$p, $yield = $iter || nil, self = this, result = nil;
        if (self.convert_context == null) self.convert_context = nil;

        if ($iter) $Helpers_in_context$28.$$p = null;
        
        (self.convert_context = ($truthy($a = self.convert_context) ? $a : [])).$push(name);
        result = Opal.yieldX($yield, []);
        self.convert_context.$pop();
        return result;
      }, $Helpers_in_context$28.$$arity = 1);
      Opal.const_set($nesting[0], 'STEM_EQNUMS_AMS', "ams");
      Opal.const_set($nesting[0], 'STEM_EQNUMS_NONE', "none");
      Opal.const_set($nesting[0], 'STEM_EQNUMS_VALID_VALUES', [$$($nesting, 'STEM_EQNUMS_NONE'), $$($nesting, 'STEM_EQNUMS_AMS'), "all"]);
      Opal.const_set($nesting[0], 'MATHJAX_VERSION', "3.2.0");
      
      Opal.def(self, '$generate_stem', $Helpers_generate_stem$29 = function $$generate_stem(cdn_base) {
        var self = this, eqnums_val = nil, mathjax_configuration = nil, mathjaxdir = nil;

        if ($truthy(self['$attr?']("stem"))) {
          
          eqnums_val = self.$attr("eqnums", $$($nesting, 'STEM_EQNUMS_NONE')).$downcase();
          if ($truthy($$($nesting, 'STEM_EQNUMS_VALID_VALUES')['$include?'](eqnums_val))) {
          } else {
            eqnums_val = $$($nesting, 'STEM_EQNUMS_AMS')
          };
          mathjax_configuration = $hash2(["tex", "options", "asciimath", "loader"], {"tex": $hash2(["inlineMath", "displayMath", "processEscapes", "tags"], {"inlineMath": [$$$($$($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]']("latexmath")], "displayMath": [$$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath")], "processEscapes": false, "tags": eqnums_val}), "options": $hash2(["ignoreHtmlClass"], {"ignoreHtmlClass": "nostem|nolatexmath"}), "asciimath": $hash2(["delimiters"], {"delimiters": [$$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath")]}), "loader": $hash2(["load"], {"load": ["input/asciimath", "output/chtml", "ui/menu"]})});
          mathjaxdir = self.$attr("mathjaxdir", "" + (cdn_base) + "/mathjax/" + ($$($nesting, 'MATHJAX_VERSION')) + "/es5");
          return $rb_plus("" + "<script>window.MathJax = " + ($$($nesting, 'JSON').$generate(mathjax_configuration)) + ";</script>", "" + "<script async src=\"" + (mathjaxdir) + "/tex-mml-chtml.js\"></script>");
        } else {
          return nil
        }
      }, $Helpers_generate_stem$29.$$arity = 1);
    })($nesting[0], $nesting);
    $send($$($nesting, 'Helpers').$constants(), 'each', [], ($Converter$30 = function(const$){var self = $Converter$30.$$s || this;

    
      
      if (const$ == null) {
        const$ = nil;
      };
      return self.$const_set(const$, $$($nesting, 'Helpers').$const_get(const$));}, $Converter$30.$$s = self, $Converter$30.$$arity = 1, $Converter$30));
    self.$register_for("revealjs", "reveal.js");
    
    Opal.def(self, '$initialize', $Converter_initialize$31 = function $$initialize(backend, opts) {
      var $a, $iter = $Converter_initialize$31.$$p, $yield = $iter || nil, self = this, delegate_backend = nil, factory = nil, converter = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Converter_initialize$31.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Converter_initialize$31, false), $zuper, $iter);
      if ($truthy(self['$respond_to?']("basebackend"))) {
        self.$basebackend("html")};
      if ($truthy(self['$respond_to?']("outfilesuffix"))) {
        self.$outfilesuffix(".html")};
      if ($truthy(self['$respond_to?']("filetype"))) {
        self.$filetype("html")};
      if ($truthy(self['$respond_to?']("supports_templates"))) {
        self.$supports_templates()};
      delegate_backend = ($truthy($a = opts['$[]']("delegate_backend")) ? $a : "html5").$to_s();
      factory = $$$($$$($$$('::', 'Asciidoctor'), 'Converter'), 'Factory');
      converter = factory.$create(delegate_backend, self.$backend_info());
      return (self.delegate_converter = (function() {if (converter['$=='](self)) {
        return factory.$new().$create(delegate_backend, self.$backend_info())
      } else {
        return converter
      }; return nil; })());
    }, $Converter_initialize$31.$$arity = -2);
    
    Opal.def(self, '$convert', $Converter_convert$32 = function $$convert(node, transform, opts) {
      var $a, self = this, converter = nil;

      
      
      if (transform == null) {
        transform = nil;
      };
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      transform = ($truthy($a = transform) ? $a : node.$node_name());
      opts = ($truthy($a = opts) ? $a : $hash2([], {}));
      converter = (function() {if ($truthy(self['$respond_to?'](transform))) {
        return self
      } else {
        return self.delegate_converter
      }; return nil; })();
      if ($truthy(opts['$empty?']())) {
        return converter.$send(transform, node)
      } else {
        return converter.$send(transform, node, opts)
      };
    }, $Converter_convert$32.$$arity = -2);
    
    Opal.def(self, '$handles?', $Converter_handles$ques$33 = function(transform) {
      var $a, self = this;

      return ($truthy($a = self['$respond_to?']("" + "convert_" + (transform))) ? $a : self['$respond_to?'](transform))
    }, $Converter_handles$ques$33.$$arity = 1);
    
    Opal.def(self, '$inline_quoted', $Converter_inline_quoted$34 = function $$inline_quoted(node, opts) {
      var $$35, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$35 = function(){var self = $$35.$$s || this, $a, $b, _buf = nil, quote_tags = nil, quote_tag = nil, $case = nil, open = nil, close = nil;
        if (self.type == null) self.type = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        quote_tags = $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript"], {"emphasis": "em", "strong": "strong", "monospaced": "code", "superscript": "sup", "subscript": "sub"});
        if ($truthy((quote_tag = quote_tags['$[]'](self.type)))) {
          _buf['$<<'](self.$html_tag(quote_tag, $hash2(["id", "class"], {"id": self.id, "class": [self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })()].$compact()}).$merge(self.$data_attrs(self.attributes)), self.text))
        } else {
          $case = self.type;
          if ("double"['$===']($case)) {_buf['$<<'](self.$inline_text_container("" + "&#8220;" + (self.text) + "&#8221;"))}
          else if ("single"['$===']($case)) {_buf['$<<'](self.$inline_text_container("" + "&#8216;" + (self.text) + "&#8217;"))}
          else if ("asciimath"['$===']($case) || "latexmath"['$===']($case)) {
          $b = $$$($$($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]'](self.type), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
          _buf['$<<'](self.$inline_text_container("" + (open) + (self.text) + (close)));}
          else {_buf['$<<'](self.$inline_text_container(self.text))}
        };
        return (_buf = _buf.$join(""));}, $$35.$$s = self, $$35.$$arity = 0, $$35));
    }, $Converter_inline_quoted$34.$$arity = -2);
    
    Opal.def(self, '$pass', $Converter_pass$36 = function $$pass(node, opts) {
      var $$37, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$37 = function(){var self = $$37.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.$content());
        return (_buf = _buf.$join(""));}, $$37.$$s = self, $$37.$$arity = 0, $$37));
    }, $Converter_pass$36.$$arity = -2);
    
    Opal.def(self, '$sidebar', $Converter_sidebar$38 = function $$sidebar(node, opts) {
      var $$39, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$39 = function(){var self = $$39.$$s || this, $a, $b, $$40, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["sidebarblock", self.$role(), (function() {if ($truthy(($truthy($a = ($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step"))) ? $a : self['$attr?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$40 = function(){var self = $$40.$$s || this, _slim_controls2 = nil;

          
            _slim_controls2 = [];
            _slim_controls2['$<<']("<div class=\"content\">");
            if ($truthy(self['$title?']())) {
              
              _slim_controls2['$<<']("<div class=\"title\">");
              _slim_controls2['$<<'](self.$title());
              _slim_controls2['$<<']("</div>");};
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</div>");
            return (_slim_controls2 = _slim_controls2.$join(""));}, $$40.$$s = self, $$40.$$arity = 0, $$40));
          _buf['$<<'](_slim_controls1);
        };
        return (_buf = _buf.$join(""));}, $$39.$$s = self, $$39.$$arity = 0, $$39));
    }, $Converter_sidebar$38.$$arity = -2);
    
    Opal.def(self, '$thematic_break', $Converter_thematic_break$41 = function $$thematic_break(node, opts) {
      var $$42, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$42 = function(){var self = $$42.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, $$42.$$s = self, $$42.$$arity = 0, $$42));
    }, $Converter_thematic_break$41.$$arity = -2);
    
    Opal.def(self, '$outline', $Converter_outline$43 = function $$outline(node, opts) {
      var $$44, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$44 = function(){var self = $$44.$$s || this, $a, $$45, _buf = nil, toclevels = nil, slevel = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.$sections()['$empty?']())) {
        } else {
          
          toclevels = ($truthy($a = toclevels) ? $a : self.$document().$attr("toclevels", $$($nesting, 'DEFAULT_TOCLEVELS')).$to_i());
          slevel = self.$section_level(self.$sections().$first());
          _buf['$<<']("<ol class=\"sectlevel");
          _buf['$<<'](slevel);
          _buf['$<<']("\">");
          $send(self.$sections(), 'each', [], ($$45 = function(sec){var self = $$45.$$s || this, $b, child_toc = nil;

          
            
            if (sec == null) {
              sec = nil;
            };
            _buf['$<<']("<li><a href=\"#");
            _buf['$<<'](sec.$id());
            _buf['$<<']("\">");
            _buf['$<<'](self.$section_title(sec));
            _buf['$<<']("</a>");
            if ($truthy(($truthy($b = $rb_lt(sec.$level(), toclevels)) ? (child_toc = self.$converter().$convert(sec, "outline")) : $b))) {
              _buf['$<<'](child_toc)};
            return _buf['$<<']("</li>");}, $$45.$$s = self, $$45.$$arity = 1, $$45));
          _buf['$<<']("</ol>");
        };
        return (_buf = _buf.$join(""));}, $$44.$$s = self, $$44.$$arity = 0, $$44));
    }, $Converter_outline$43.$$arity = -2);
    
    Opal.def(self, '$inline_break', $Converter_inline_break$46 = function $$inline_break(node, opts) {
      var $$47, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$47 = function(){var self = $$47.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.text);
        _buf['$<<']("<br>");
        return (_buf = _buf.$join(""));}, $$47.$$s = self, $$47.$$arity = 0, $$47));
    }, $Converter_inline_break$46.$$arity = -2);
    
    Opal.def(self, '$video', $Converter_video$48 = function $$video(node, opts) {
      var $$49, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$49 = function(){var self = $$49.$$s || this, $a, $b, $$50, _buf = nil, no_stretch = nil, width = nil, height = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        no_stretch = ($truthy($a = self['$attr?']("width")) ? $a : self['$attr?']("height"));
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
        } else {
          return "100%"
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
        } else {
          return "100%"
        }; return nil; })();
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["videoblock", self.style, self.$role(), (function() {if ($truthy(no_stretch)) {
          return nil
        } else {
          return "stretch"
        }; return nil; })(), (function() {if ($truthy(($truthy($a = ($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step"))) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$50 = function(){var self = $$50.$$s || this, $c, _slim_controls2 = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, loop_param = nil, muted_param = nil, src = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, params = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");};
          $case = self.$attr("poster");
          if ("vimeo"['$===']($case)) {
          if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
          } else {
            asset_uri_scheme = "" + (asset_uri_scheme) + ":"
          };
          start_anchor = (function() {if ($truthy(self['$attr?']("start"))) {
            return "" + "#at=" + (self.$attr("start"))
          } else {
            return nil
          }; return nil; })();
          delimiter = ["?"];
          loop_param = (function() {if ($truthy(self['$option?']("loop"))) {
            return "" + (($truthy($c = delimiter.$pop()) ? $c : "&amp;")) + "loop=1"
          } else {
            return ""
          }; return nil; })();
          muted_param = (function() {if ($truthy(self['$option?']("muted"))) {
            return "" + (($truthy($c = delimiter.$pop()) ? $c : "&amp;")) + "muted=1"
          } else {
            return ""
          }; return nil; })();
          src = "" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (self.$attr("target")) + (loop_param) + (muted_param) + (start_anchor);
          _slim_controls2['$<<']("<iframe");
          _slim_codeattributes1 = width;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _slim_controls2['$<<'](" width")
            } else {
              
              _slim_controls2['$<<'](" width=\"");
              _slim_controls2['$<<'](_slim_codeattributes1);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes2 = height;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _slim_controls2['$<<'](" height")
            } else {
              
              _slim_controls2['$<<'](" height=\"");
              _slim_controls2['$<<'](_slim_codeattributes2);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes3 = src;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _slim_controls2['$<<'](" src")
            } else {
              
              _slim_controls2['$<<'](" src=\"");
              _slim_controls2['$<<'](_slim_codeattributes3);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes4 = 0;
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _slim_controls2['$<<'](" frameborder")
            } else {
              
              _slim_controls2['$<<'](" frameborder=\"");
              _slim_controls2['$<<'](_slim_codeattributes4);
              _slim_controls2['$<<']("\"");
            }};
          _slim_controls2['$<<'](" webkitAllowFullScreen mozallowfullscreen allowFullScreen");
          _slim_codeattributes5 = self['$option?']("autoplay");
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _slim_controls2['$<<'](" data-autoplay")
            } else {
              
              _slim_controls2['$<<'](" data-autoplay=\"");
              _slim_controls2['$<<'](_slim_codeattributes5);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes6 = (function() {if ($truthy(self['$option?']("autoplay"))) {
            return "autoplay"
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _slim_controls2['$<<'](" allow")
            } else {
              
              _slim_controls2['$<<'](" allow=\"");
              _slim_controls2['$<<'](_slim_codeattributes6);
              _slim_controls2['$<<']("\"");
            }};
          _slim_controls2['$<<']("></iframe>");}
          else if ("youtube"['$===']($case)) {
          if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
          } else {
            asset_uri_scheme = "" + (asset_uri_scheme) + ":"
          };
          params = ["rel=0"];
          if ($truthy(self['$attr?']("start"))) {
            params['$<<']("" + "start=" + (self.$attr("start")))};
          if ($truthy(self['$attr?']("end"))) {
            params['$<<']("" + "end=" + (self.$attr("end")))};
          if ($truthy(self['$option?']("loop"))) {
            params['$<<']("loop=1")};
          if ($truthy(self['$option?']("muted"))) {
            params['$<<']("mute=1")};
          if ($truthy(self['$option?']("nocontrols"))) {
            params['$<<']("controls=0")};
          src = "" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (self.$attr("target")) + "?" + ($rb_times(params, "&amp;"));
          _slim_controls2['$<<']("<iframe");
          _slim_codeattributes7 = width;
          if ($truthy(_slim_codeattributes7)) {
            if (_slim_codeattributes7['$=='](true)) {
              _slim_controls2['$<<'](" width")
            } else {
              
              _slim_controls2['$<<'](" width=\"");
              _slim_controls2['$<<'](_slim_codeattributes7);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes8 = height;
          if ($truthy(_slim_codeattributes8)) {
            if (_slim_codeattributes8['$=='](true)) {
              _slim_controls2['$<<'](" height")
            } else {
              
              _slim_controls2['$<<'](" height=\"");
              _slim_controls2['$<<'](_slim_codeattributes8);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes9 = src;
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _slim_controls2['$<<'](" src")
            } else {
              
              _slim_controls2['$<<'](" src=\"");
              _slim_controls2['$<<'](_slim_codeattributes9);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes10 = 0;
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _slim_controls2['$<<'](" frameborder")
            } else {
              
              _slim_controls2['$<<'](" frameborder=\"");
              _slim_controls2['$<<'](_slim_codeattributes10);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes11 = self['$option?']("nofullscreen")['$!']();
          if ($truthy(_slim_codeattributes11)) {
            if (_slim_codeattributes11['$=='](true)) {
              _slim_controls2['$<<'](" allowfullscreen")
            } else {
              
              _slim_controls2['$<<'](" allowfullscreen=\"");
              _slim_controls2['$<<'](_slim_codeattributes11);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes12 = self['$option?']("autoplay");
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _slim_controls2['$<<'](" data-autoplay")
            } else {
              
              _slim_controls2['$<<'](" data-autoplay=\"");
              _slim_controls2['$<<'](_slim_codeattributes12);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes13 = (function() {if ($truthy(self['$option?']("autoplay"))) {
            return "autoplay"
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _slim_controls2['$<<'](" allow")
            } else {
              
              _slim_controls2['$<<'](" allow=\"");
              _slim_controls2['$<<'](_slim_codeattributes13);
              _slim_controls2['$<<']("\"");
            }};
          _slim_controls2['$<<']("></iframe>");}
          else {
          _slim_controls2['$<<']("<video");
          _slim_codeattributes14 = self.$media_uri(self.$attr("target"));
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _slim_controls2['$<<'](" src")
            } else {
              
              _slim_controls2['$<<'](" src=\"");
              _slim_controls2['$<<'](_slim_codeattributes14);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes15 = width;
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _slim_controls2['$<<'](" width")
            } else {
              
              _slim_controls2['$<<'](" width=\"");
              _slim_controls2['$<<'](_slim_codeattributes15);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes16 = height;
          if ($truthy(_slim_codeattributes16)) {
            if (_slim_codeattributes16['$=='](true)) {
              _slim_controls2['$<<'](" height")
            } else {
              
              _slim_controls2['$<<'](" height=\"");
              _slim_controls2['$<<'](_slim_codeattributes16);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes17 = (function() {if ($truthy(self.$attr("poster"))) {
            return self.$media_uri(self.$attr("poster"))
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes17)) {
            if (_slim_codeattributes17['$=='](true)) {
              _slim_controls2['$<<'](" poster")
            } else {
              
              _slim_controls2['$<<'](" poster=\"");
              _slim_controls2['$<<'](_slim_codeattributes17);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes18 = self['$option?']("autoplay");
          if ($truthy(_slim_codeattributes18)) {
            if (_slim_codeattributes18['$=='](true)) {
              _slim_controls2['$<<'](" data-autoplay")
            } else {
              
              _slim_controls2['$<<'](" data-autoplay=\"");
              _slim_controls2['$<<'](_slim_codeattributes18);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes19 = self['$option?']("nocontrols")['$!']();
          if ($truthy(_slim_codeattributes19)) {
            if (_slim_codeattributes19['$=='](true)) {
              _slim_controls2['$<<'](" controls")
            } else {
              
              _slim_controls2['$<<'](" controls=\"");
              _slim_controls2['$<<'](_slim_codeattributes19);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes20 = self['$option?']("loop");
          if ($truthy(_slim_codeattributes20)) {
            if (_slim_codeattributes20['$=='](true)) {
              _slim_controls2['$<<'](" loop")
            } else {
              
              _slim_controls2['$<<'](" loop=\"");
              _slim_controls2['$<<'](_slim_codeattributes20);
              _slim_controls2['$<<']("\"");
            }};
          _slim_controls2['$<<'](">Your browser does not support the video tag.</video>");};
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$50.$$s = self, $$50.$$arity = 0, $$50));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$49.$$s = self, $$49.$$arity = 0, $$49));
    }, $Converter_video$48.$$arity = -2);
    
    Opal.def(self, '$inline_footnote', $Converter_inline_footnote$51 = function $$inline_footnote(node, opts) {
      var $$52, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$52 = function(){var self = $$52.$$s || this, $$53, $$54, _buf = nil, footnote = nil, index = nil, id = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.type == null) self.type = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        footnote = self.$slide_footnote(self);
        index = footnote.$attr("index");
        id = footnote.$id();
        if (self.type['$==']("xref")) {
          
          _slim_controls1 = $send(self, 'html_tag', ["sup", $hash2(["class"], {"class": ["footnoteref"]}).$merge(self.$data_attrs(footnote.$attributes()))], ($$53 = function(){var self = $$53.$$s || this, _slim_controls2 = nil;

          
            _slim_controls2 = [];
            _slim_controls2['$<<']("[<span class=\"footnote\" title=\"View footnote.\">");
            _slim_controls2['$<<'](index);
            _slim_controls2['$<<']("</span>]");
            return (_slim_controls2 = _slim_controls2.$join(""));}, $$53.$$s = self, $$53.$$arity = 0, $$53));
          _buf['$<<'](_slim_controls1);
        } else {
          
          _slim_controls3 = $send(self, 'html_tag', ["sup", $hash2(["id", "class"], {"id": (function() {if ($truthy(id)) {
            return "" + "_footnote_" + (id)
          } else {
            return nil
          }; return nil; })(), "class": ["footnote"]}).$merge(self.$data_attrs(footnote.$attributes()))], ($$54 = function(){var self = $$54.$$s || this, _slim_controls4 = nil;

          
            _slim_controls4 = [];
            _slim_controls4['$<<']("[<span class=\"footnote\" title=\"View footnote.\">");
            _slim_controls4['$<<'](index);
            _slim_controls4['$<<']("</span>]");
            return (_slim_controls4 = _slim_controls4.$join(""));}, $$54.$$s = self, $$54.$$arity = 0, $$54));
          _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, $$52.$$s = self, $$52.$$arity = 0, $$52));
    }, $Converter_inline_footnote$51.$$arity = -2);
    
    Opal.def(self, '$stretch_nested_elements', $Converter_stretch_nested_elements$55 = function $$stretch_nested_elements(node, opts) {
      var $$56, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$56 = function(){var self = $$56.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<script>var dom = {};\ndom.slides = document.querySelector('.reveal .slides');\n\nfunction getRemainingHeight(element, slideElement, height) {\n  height = height || 0;\n  if (element) {\n    var newHeight, oldHeight = element.style.height;\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = '0px';\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    slideElement.style.height = 'auto';\n    newHeight = height - slideElement.offsetHeight;\n    // Restore the old height, just in case\n    element.style.height = oldHeight + 'px';\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    slideElement.style.removeProperty('height');\n    return newHeight;\n  }\n  return height;\n}\n\nfunction layoutSlideContents(width, height) {\n  // Handle sizing of elements with the 'stretch' class\n  toArray(dom.slides.querySelectorAll('section .stretch')).forEach(function (element) {\n    // Determine how much vertical space we can use\n    var limit = 5; // hard limit\n    var parent = element.parentNode;\n    while (parent.nodeName !== 'SECTION' && limit > 0) {\n      parent = parent.parentNode;\n      limit--;\n    }\n    if (limit === 0) {\n      // unable to find parent, aborting!\n      return;\n    }\n    var remainingHeight = getRemainingHeight(element, parent, height);\n    // Consider the aspect ratio of media elements\n    if (/(img|video)/gi.test(element.nodeName)) {\n      var nw = element.naturalWidth || element.videoWidth, nh = element.naturalHeight || element.videoHeight;\n      var es = Math.min(width / nw, remainingHeight / nh);\n      element.style.width = (nw * es) + 'px';\n      element.style.height = (nh * es) + 'px';\n    } else {\n      element.style.width = width + 'px';\n      element.style.height = remainingHeight + 'px';\n    }\n  });\n}\n\nfunction toArray(o) {\n  return Array.prototype.slice.call(o);\n}\n\nReveal.addEventListener('slidechanged', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('ready', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('resize', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});</script>");
        return (_buf = _buf.$join(""));}, $$56.$$s = self, $$56.$$arity = 0, $$56));
    }, $Converter_stretch_nested_elements$55.$$arity = -2);
    
    Opal.def(self, '$image', $Converter_image$57 = function $$image(node, opts) {
      var $$58, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$58 = function(){var self = $$58.$$s || this, $a, $b, $$59, _buf = nil, width = nil, height = nil, inline_style = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
        } else {
          return nil
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = self['$has_role?']("stretch")) ? ($truthy($b = self['$attr?']("width")) ? $b : self['$attr?']("height"))['$!']() : $a))) {
          height = "100%"};
        if ($truthy(($truthy($a = self.$attributes()['$[]'](1)['$==']("background")) ? $a : self.$attributes()['$[]'](1)['$==']("canvas")))) {
        } else {
          
          inline_style = [(function() {if ($truthy(self['$attr?']("align"))) {
            return "" + "text-align: " + (self.$attr("align"))
          } else {
            return nil
          }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
            return "" + "float: " + (self.$attr("float"))
          } else {
            return nil
          }; return nil; })()].$compact().$join("; ");
          _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class", "style"], {"id": self.id, "class": ["imageblock", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })()], "style": inline_style}).$merge(self.$data_attrs(self.attributes))], ($$59 = function(){var self = $$59.$$s || this, _slim_controls2 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil;

          
            _slim_controls2 = [];
            if ($truthy(self['$attr?']("link"))) {
              
              _slim_controls2['$<<']("<a class=\"image\"");
              _slim_codeattributes1 = self.$attr("link");
              if ($truthy(_slim_codeattributes1)) {
                if (_slim_codeattributes1['$=='](true)) {
                  _slim_controls2['$<<'](" href")
                } else {
                  
                  _slim_controls2['$<<'](" href=\"");
                  _slim_controls2['$<<'](_slim_codeattributes1);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes2 = self.$attr("window");
              if ($truthy(_slim_codeattributes2)) {
                if (_slim_codeattributes2['$=='](true)) {
                  _slim_controls2['$<<'](" target")
                } else {
                  
                  _slim_controls2['$<<'](" target=\"");
                  _slim_controls2['$<<'](_slim_codeattributes2);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes3 = self.$bool_data_attr("link_preview");
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _slim_controls2['$<<'](" data-preview-link")
                } else {
                  
                  _slim_controls2['$<<'](" data-preview-link=\"");
                  _slim_controls2['$<<'](_slim_codeattributes3);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("><img");
              _slim_codeattributes4 = self.$image_uri(self.$attr("target"));
              if ($truthy(_slim_codeattributes4)) {
                if (_slim_codeattributes4['$=='](true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes4);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes5 = self.$attr("alt");
              if ($truthy(_slim_codeattributes5)) {
                if (_slim_codeattributes5['$=='](true)) {
                  _slim_controls2['$<<'](" alt")
                } else {
                  
                  _slim_controls2['$<<'](" alt=\"");
                  _slim_controls2['$<<'](_slim_codeattributes5);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes6 = width;
              if ($truthy(_slim_codeattributes6)) {
                if (_slim_codeattributes6['$=='](true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes6);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes7 = height;
              if ($truthy(_slim_codeattributes7)) {
                if (_slim_codeattributes7['$=='](true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes7);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes8 = (function() {if ($truthy(self['$attr?']("background"))) {
                return "" + "background: " + (self.$attr("background"))
              } else {
                return nil
              }; return nil; })();
              if ($truthy(_slim_codeattributes8)) {
                if (_slim_codeattributes8['$=='](true)) {
                  _slim_controls2['$<<'](" style")
                } else {
                  
                  _slim_controls2['$<<'](" style=\"");
                  _slim_controls2['$<<'](_slim_codeattributes8);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("></a>");
            } else {
              
              _slim_controls2['$<<']("<img");
              _slim_codeattributes9 = self.$image_uri(self.$attr("target"));
              if ($truthy(_slim_codeattributes9)) {
                if (_slim_codeattributes9['$=='](true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes9);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes10 = self.$attr("alt");
              if ($truthy(_slim_codeattributes10)) {
                if (_slim_codeattributes10['$=='](true)) {
                  _slim_controls2['$<<'](" alt")
                } else {
                  
                  _slim_controls2['$<<'](" alt=\"");
                  _slim_controls2['$<<'](_slim_codeattributes10);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes11 = width;
              if ($truthy(_slim_codeattributes11)) {
                if (_slim_codeattributes11['$=='](true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes11);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes12 = height;
              if ($truthy(_slim_codeattributes12)) {
                if (_slim_codeattributes12['$=='](true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes12);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes13 = (function() {if ($truthy(self['$attr?']("background"))) {
                return "" + "background: " + (self.$attr("background"))
              } else {
                return nil
              }; return nil; })();
              if ($truthy(_slim_codeattributes13)) {
                if (_slim_codeattributes13['$=='](true)) {
                  _slim_controls2['$<<'](" style")
                } else {
                  
                  _slim_controls2['$<<'](" style=\"");
                  _slim_controls2['$<<'](_slim_codeattributes13);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<'](">");
            };
            return (_slim_controls2 = _slim_controls2.$join(""));}, $$59.$$s = self, $$59.$$arity = 0, $$59));
          _buf['$<<'](_slim_controls1);
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$captioned_title());
            _buf['$<<']("</div>");};
        };
        return (_buf = _buf.$join(""));}, $$58.$$s = self, $$58.$$arity = 0, $$58));
    }, $Converter_image$57.$$arity = -2);
    
    Opal.def(self, '$admonition', $Converter_admonition$60 = function $$admonition(node, opts) {
      var $$61, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$61 = function(){var self = $$61.$$s || this, $a, $b, $$62, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["admonitionblock", self.$attr("name"), self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$62 = function(){var self = $$62.$$s || this, $c, _slim_controls2 = nil, icon_mapping = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;
            if (self.document == null) self.document = nil;
            if (self.caption == null) self.caption = nil;

          
            _slim_controls2 = [];
            _slim_controls2['$<<']("<table><tr><td class=\"icon\">");
            if ($truthy(self.document['$attr?']("icons", "font"))) {
              
              icon_mapping = $$($nesting, 'Hash')['$[]']("caution", "fire", "important", "exclamation-circle", "note", "info-circle", "tip", "lightbulb-o", "warning", "warning");
              _slim_controls2['$<<']("<i");
              _temple_html_attributeremover1 = [];
              _slim_codeattributes1 = "" + "fa fa-" + (icon_mapping['$[]'](self.$attr("name")));
              if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
                
                _slim_codeattributes1 = _slim_codeattributes1.$flatten();
                $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
              } else {
                _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
              };
              _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
              if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
                
                _slim_controls2['$<<'](" class=\"");
                _slim_controls2['$<<'](_temple_html_attributeremover1);
                _slim_controls2['$<<']("\"");};
              _slim_codeattributes2 = self.$attr(($truthy($c = "textlabel") ? $c : self.caption));
              if ($truthy(_slim_codeattributes2)) {
                if (_slim_codeattributes2['$=='](true)) {
                  _slim_controls2['$<<'](" title")
                } else {
                  
                  _slim_controls2['$<<'](" title=\"");
                  _slim_controls2['$<<'](_slim_codeattributes2);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("></i>");
            } else if ($truthy(self.document['$attr?']("icons"))) {
              
              _slim_controls2['$<<']("<img");
              _slim_codeattributes3 = self.$icon_uri(self.$attr("name"));
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes3);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes4 = self.caption;
              if ($truthy(_slim_codeattributes4)) {
                if (_slim_codeattributes4['$=='](true)) {
                  _slim_controls2['$<<'](" alt")
                } else {
                  
                  _slim_controls2['$<<'](" alt=\"");
                  _slim_controls2['$<<'](_slim_codeattributes4);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<'](">");
            } else {
              
              _slim_controls2['$<<']("<div class=\"title\">");
              _slim_controls2['$<<'](($truthy($c = self.$attr("textlabel")) ? $c : self.caption));
              _slim_controls2['$<<']("</div>");
            };
            _slim_controls2['$<<']("</td><td class=\"content\">");
            if ($truthy(self['$title?']())) {
              
              _slim_controls2['$<<']("<div class=\"title\">");
              _slim_controls2['$<<'](self.$title());
              _slim_controls2['$<<']("</div>");};
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</td></tr></table>");
            return (_slim_controls2 = _slim_controls2.$join(""));}, $$62.$$s = self, $$62.$$arity = 0, $$62));
          _buf['$<<'](_slim_controls1);
        };
        return (_buf = _buf.$join(""));}, $$61.$$s = self, $$61.$$arity = 0, $$61));
    }, $Converter_admonition$60.$$arity = -2);
    
    Opal.def(self, '$ruler', $Converter_ruler$63 = function $$ruler(node, opts) {
      var $$64, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$64 = function(){var self = $$64.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, $$64.$$s = self, $$64.$$arity = 0, $$64));
    }, $Converter_ruler$63.$$arity = -2);
    
    Opal.def(self, '$page_break', $Converter_page_break$65 = function $$page_break(node, opts) {
      var $$66, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$66 = function(){var self = $$66.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div style=\"page-break-after: always;\"></div>");
        return (_buf = _buf.$join(""));}, $$66.$$s = self, $$66.$$arity = 0, $$66));
    }, $Converter_page_break$65.$$arity = -2);
    
    Opal.def(self, '$stem', $Converter_stem$67 = function $$stem(node, opts) {
      var $$68, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$68 = function(){var self = $$68.$$s || this, $a, $b, $$69, _buf = nil, open = nil, close = nil, equation = nil, _slim_controls1 = nil;
        if (self.style == null) self.style = nil;
        if (self.subs == null) self.subs = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $b = $$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]'](self.style.$to_sym()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        equation = self.$content().$strip();
        if ($truthy(($truthy($a = ($truthy($b = self.subs['$nil?']()) ? $b : self.subs['$empty?']())) ? self['$attr?']("subs")['$!']() : $a))) {
          equation = self.$sub_specialcharacters(equation)};
        if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {
        } else {
          equation = "" + (open) + (equation) + (close)
        };
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["stemblock", self.$role(), (function() {if ($truthy(($truthy($a = ($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step"))) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$69 = function(){var self = $$69.$$s || this, _slim_controls2 = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<div class=\"content\">");
          _slim_controls2['$<<'](equation);
          _slim_controls2['$<<']("</div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$69.$$s = self, $$69.$$arity = 0, $$69));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$68.$$s = self, $$68.$$arity = 0, $$68));
    }, $Converter_stem$67.$$arity = -2);
    
    Opal.def(self, '$toc', $Converter_toc$70 = function $$toc(node, opts) {
      var $$71, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$71 = function(){var self = $$71.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div id=\"toc\"");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = self.$document().$attr("toc-class", "toc");
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<']("><div id=\"toctitle\">");
        _buf['$<<'](self.$document().$attr("toc-title"));
        _buf['$<<']("</div>");
        _buf['$<<'](self.$converter().$convert(self.$document(), "outline"));
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, $$71.$$s = self, $$71.$$arity = 0, $$71));
    }, $Converter_toc$70.$$arity = -2);
    
    Opal.def(self, '$ulist', $Converter_ulist$72 = function $$ulist(node, opts) {
      var $$73, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$73 = function(){var self = $$73.$$s || this, $$74, _buf = nil, checklist = nil, marker_checked = nil, marker_unchecked = nil, _slim_controls1 = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy((checklist = (function() {if ($truthy(self['$option?']("checklist"))) {
          return "checklist"
        } else {
          return nil
        }; return nil; })()))) {
          if ($truthy(self['$option?']("interactive"))) {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\">";
          } else if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"icon-check\"></i>";
            marker_unchecked = "<i class=\"icon-check-empty\"></i>";
          } else {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked disabled>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\" disabled>";
          }};
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["ulist", checklist, self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], ($$74 = function(){var self = $$74.$$s || this, $a, $$75, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;
          if (self.style == null) self.style = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<ul");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = ($truthy($a = checklist) ? $a : self.style);
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _slim_controls2['$<<'](" class=\"");
            _slim_controls2['$<<'](_temple_html_attributeremover1);
            _slim_controls2['$<<']("\"");};
          _slim_controls2['$<<'](">");
          $send(self.$items(), 'each', [], ($$75 = function(item){var self = $$75.$$s || this, $b, $c, _temple_html_attributeremover2 = nil, _slim_codeattributes2 = nil;

          
            
            if (item == null) {
              item = nil;
            };
            _slim_controls2['$<<']("<li");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes2 = (function() {if ($truthy(($truthy($b = ($truthy($c = self['$option?']("step")) ? $c : self['$has_role?']("step"))) ? $b : self['$attr?']("step")))) {
              return "fragment"
            } else {
              return nil
            }; return nil; })();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
              
              _slim_codeattributes2 = _slim_codeattributes2.$flatten();
              $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover2);
              _slim_controls2['$<<']("\"");};
            _slim_controls2['$<<']("><p>");
            if ($truthy(($truthy($b = checklist) ? item['$attr?']("checkbox") : $b))) {
              _slim_controls2['$<<']("" + ((function() {if ($truthy(item['$attr?']("checked"))) {
                return marker_checked
              } else {
                return marker_unchecked
              }; return nil; })()) + (item.$text()))
            } else {
              _slim_controls2['$<<'](item.$text())
            };
            _slim_controls2['$<<']("</p>");
            if ($truthy(item['$blocks?']())) {
              _slim_controls2['$<<'](item.$content())};
            return _slim_controls2['$<<']("</li>");}, $$75.$$s = self, $$75.$$arity = 1, $$75));
          _slim_controls2['$<<']("</ul>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$74.$$s = self, $$74.$$arity = 0, $$74));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$73.$$s = self, $$73.$$arity = 0, $$73));
    }, $Converter_ulist$72.$$arity = -2);
    
    Opal.def(self, '$inline_indexterm', $Converter_inline_indexterm$76 = function $$inline_indexterm(node, opts) {
      var $$77, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$77 = function(){var self = $$77.$$s || this, _buf = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("visible")) {
          _buf['$<<'](self.text)};
        return (_buf = _buf.$join(""));}, $$77.$$s = self, $$77.$$arity = 0, $$77));
    }, $Converter_inline_indexterm$76.$$arity = -2);
    
    Opal.def(self, '$inline_menu', $Converter_inline_menu$78 = function $$inline_menu(node, opts) {
      var $$79, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$79 = function(){var self = $$79.$$s || this, $$80, $$82, $$83, _buf = nil, menu = nil, menuitem = nil, submenus = nil, _slim_controls1 = nil, _slim_controls3 = nil, _slim_controls5 = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        menu = self.$attr("menu");
        menuitem = self.$attr("menuitem");
        if ($truthy((submenus = self.$attr("submenus"))['$empty?']()['$!']())) {
          
          _slim_controls1 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["menuseq"]}).$merge(self.$data_attrs(self.attributes))], ($$80 = function(){var self = $$80.$$s || this, $$81, _slim_controls2 = nil;

          
            _slim_controls2 = [];
            _slim_controls2['$<<']("<span class=\"menu\">");
            _slim_controls2['$<<'](menu);
            _slim_controls2['$<<']("</span>&#160;&#9656;&#32;");
            _slim_controls2['$<<']($send(submenus, 'map', [], ($$81 = function(submenu){var self = $$81.$$s || this;

            
              
              if (submenu == null) {
                submenu = nil;
              };
              return "" + "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656;&#32;";}, $$81.$$s = self, $$81.$$arity = 1, $$81)).$join());
            _slim_controls2['$<<']("<span class=\"menuitem\">");
            _slim_controls2['$<<'](menuitem);
            _slim_controls2['$<<']("</span>");
            return (_slim_controls2 = _slim_controls2.$join(""));}, $$80.$$s = self, $$80.$$arity = 0, $$80));
          _buf['$<<'](_slim_controls1);
        } else if ($truthy(menuitem['$nil?']()['$!']())) {
          
          _slim_controls3 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["menuseq"]}).$merge(self.$data_attrs(self.attributes))], ($$82 = function(){var self = $$82.$$s || this, _slim_controls4 = nil;

          
            _slim_controls4 = [];
            _slim_controls4['$<<']("<span class=\"menu\">");
            _slim_controls4['$<<'](menu);
            _slim_controls4['$<<']("</span>&#160;&#9656;&#32;<span class=\"menuitem\">");
            _slim_controls4['$<<'](menuitem);
            _slim_controls4['$<<']("</span>");
            return (_slim_controls4 = _slim_controls4.$join(""));}, $$82.$$s = self, $$82.$$arity = 0, $$82));
          _buf['$<<'](_slim_controls3);
        } else {
          
          _slim_controls5 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["menu"]}).$merge(self.$data_attrs(self.attributes))], ($$83 = function(){var self = $$83.$$s || this, _slim_controls6 = nil;

          
            _slim_controls6 = [];
            _slim_controls6['$<<'](menu);
            return (_slim_controls6 = _slim_controls6.$join(""));}, $$83.$$s = self, $$83.$$arity = 0, $$83));
          _buf['$<<'](_slim_controls5);
        };
        return (_buf = _buf.$join(""));}, $$79.$$s = self, $$79.$$arity = 0, $$79));
    }, $Converter_inline_menu$78.$$arity = -2);
    
    Opal.def(self, '$colist', $Converter_colist$84 = function $$colist(node, opts) {
      var $$85, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$85 = function(){var self = $$85.$$s || this, $a, $$86, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["colist", self.style, self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$86 = function(){var self = $$86.$$s || this, $$87, $$88, _slim_controls2 = nil, font_icons = nil;
          if (self.document == null) self.document = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          if ($truthy(self.document['$attr?']("icons"))) {
            
            font_icons = self.document['$attr?']("icons", "font");
            _slim_controls2['$<<']("<table>");
            $send(self.$items(), 'each_with_index', [], ($$87 = function(item, i){var self = $$87.$$s || this, num = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;

            
              
              if (item == null) {
                item = nil;
              };
              
              if (i == null) {
                i = nil;
              };
              num = $rb_plus(i, 1);
              _slim_controls2['$<<']("<tr><td>");
              if ($truthy(font_icons)) {
                
                _slim_controls2['$<<']("<i class=\"conum\"");
                _slim_codeattributes1 = num;
                if ($truthy(_slim_codeattributes1)) {
                  if (_slim_codeattributes1['$=='](true)) {
                    _slim_controls2['$<<'](" data-value")
                  } else {
                    
                    _slim_controls2['$<<'](" data-value=\"");
                    _slim_controls2['$<<'](_slim_codeattributes1);
                    _slim_controls2['$<<']("\"");
                  }};
                _slim_controls2['$<<']("></i><b>");
                _slim_controls2['$<<'](num);
                _slim_controls2['$<<']("</b>");
              } else {
                
                _slim_controls2['$<<']("<img");
                _slim_codeattributes2 = self.$icon_uri("" + "callouts/" + (num));
                if ($truthy(_slim_codeattributes2)) {
                  if (_slim_codeattributes2['$=='](true)) {
                    _slim_controls2['$<<'](" src")
                  } else {
                    
                    _slim_controls2['$<<'](" src=\"");
                    _slim_controls2['$<<'](_slim_codeattributes2);
                    _slim_controls2['$<<']("\"");
                  }};
                _slim_codeattributes3 = num;
                if ($truthy(_slim_codeattributes3)) {
                  if (_slim_codeattributes3['$=='](true)) {
                    _slim_controls2['$<<'](" alt")
                  } else {
                    
                    _slim_controls2['$<<'](" alt=\"");
                    _slim_controls2['$<<'](_slim_codeattributes3);
                    _slim_controls2['$<<']("\"");
                  }};
                _slim_controls2['$<<'](">");
              };
              _slim_controls2['$<<']("</td><td>");
              _slim_controls2['$<<'](item.$text());
              return _slim_controls2['$<<']("</td></tr>");}, $$87.$$s = self, $$87.$$arity = 2, $$87));
            _slim_controls2['$<<']("</table>");
          } else {
            
            _slim_controls2['$<<']("<ol>");
            $send(self.$items(), 'each', [], ($$88 = function(item){var self = $$88.$$s || this;

            
              
              if (item == null) {
                item = nil;
              };
              _slim_controls2['$<<']("<li><p>");
              _slim_controls2['$<<'](item.$text());
              return _slim_controls2['$<<']("</p></li>");}, $$88.$$s = self, $$88.$$arity = 1, $$88));
            _slim_controls2['$<<']("</ol>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$86.$$s = self, $$86.$$arity = 0, $$86));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$85.$$s = self, $$85.$$arity = 0, $$85));
    }, $Converter_colist$84.$$arity = -2);
    
    Opal.def(self, '$inline_anchor', $Converter_inline_anchor$89 = function $$inline_anchor(node, opts) {
      var $$90, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$90 = function(){var self = $$90.$$s || this, $a, $$91, $$92, _buf = nil, $case = nil, refid = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.type == null) self.type = nil;
        if (self.target == null) self.target = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.type;
        if ("xref"['$===']($case)) {
        refid = ($truthy($a = self.$attr("refid")) ? $a : self.target);
        _slim_controls1 = $send(self, 'html_tag', ["a", $hash2(["href", "class"], {"href": self.target, "class": [self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()].$compact()}).$merge(self.$data_attrs(self.attributes))], ($$91 = function(){var self = $$91.$$s || this, $b, _slim_controls2 = nil;
          if (self.text == null) self.text = nil;
          if (self.document == null) self.document = nil;

        
          _slim_controls2 = [];
          _slim_controls2['$<<'](($truthy($b = self.text) ? $b : self.document.$references()['$[]']("ids").$fetch(refid, "" + "[" + (refid) + "]")).$tr_s("\n", " "));
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$91.$$s = self, $$91.$$arity = 0, $$91));
        _buf['$<<'](_slim_controls1);}
        else if ("ref"['$===']($case)) {_buf['$<<'](self.$html_tag("a", $hash2(["id"], {"id": self.target}).$merge(self.$data_attrs(self.attributes))))}
        else if ("bibref"['$===']($case)) {
        _buf['$<<'](self.$html_tag("a", $hash2(["id"], {"id": self.target}).$merge(self.$data_attrs(self.attributes))));
        _buf['$<<']("[");
        _buf['$<<'](self.target);
        _buf['$<<']("]");}
        else {
        _slim_controls3 = $send(self, 'html_tag', ["a", $hash2(["href", "class", "target", "data-preview-link"], {"href": self.target, "class": [self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()].$compact(), "target": self.$attr("window"), "data-preview-link": self.$bool_data_attr("preview")}).$merge(self.$data_attrs(self.attributes))], ($$92 = function(){var self = $$92.$$s || this, _slim_controls4 = nil;
          if (self.text == null) self.text = nil;

        
          _slim_controls4 = [];
          _slim_controls4['$<<'](self.text);
          return (_slim_controls4 = _slim_controls4.$join(""));}, $$92.$$s = self, $$92.$$arity = 0, $$92));
        _buf['$<<'](_slim_controls3);};
        return (_buf = _buf.$join(""));}, $$90.$$s = self, $$90.$$arity = 0, $$90));
    }, $Converter_inline_anchor$89.$$arity = -2);
    
    Opal.def(self, '$floating_title', $Converter_floating_title$93 = function $$floating_title(node, opts) {
      var $$94, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$94 = function(){var self = $$94.$$s || this, _buf = nil, _slim_htag_filter1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_htag_filter1 = $rb_plus(self.$level(), 1).$to_s();
        _buf['$<<']("<h");
        _buf['$<<'](_slim_htag_filter1);
        _slim_codeattributes1 = self.$id();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = [self.$style(), self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.$title());
        _buf['$<<']("</h");
        _buf['$<<'](_slim_htag_filter1);
        _buf['$<<'](">");
        return (_buf = _buf.$join(""));}, $$94.$$s = self, $$94.$$arity = 0, $$94));
    }, $Converter_floating_title$93.$$arity = -2);
    
    Opal.def(self, '$quote', $Converter_quote$95 = function $$quote(node, opts) {
      var $$96, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$96 = function(){var self = $$96.$$s || this, $a, $$97, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["quoteblock", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$97 = function(){var self = $$97.$$s || this, $b, _slim_controls2 = nil, attribution = nil, citetitle = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<blockquote>");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</blockquote>");
          attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
            
            return self.$attr("attribution");
          } else {
            return nil
          }; return nil; })();
          citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
            
            return self.$attr("citetitle");
          } else {
            return nil
          }; return nil; })();
          if ($truthy(($truthy($b = attribution) ? $b : citetitle))) {
            
            _slim_controls2['$<<']("<div class=\"attribution\">");
            if ($truthy(citetitle)) {
              
              _slim_controls2['$<<']("<cite>");
              _slim_controls2['$<<'](citetitle);
              _slim_controls2['$<<']("</cite>");};
            if ($truthy(attribution)) {
              
              if ($truthy(citetitle)) {
                _slim_controls2['$<<']("<br>")};
              _slim_controls2['$<<']("&#8212; ");
              _slim_controls2['$<<'](attribution);};
            _slim_controls2['$<<']("</div>");};
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$97.$$s = self, $$97.$$arity = 0, $$97));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$96.$$s = self, $$96.$$arity = 0, $$96));
    }, $Converter_quote$95.$$arity = -2);
    
    Opal.def(self, '$dlist', $Converter_dlist$98 = function $$dlist(node, opts) {
      var $$99, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$99 = function(){var self = $$99.$$s || this, $$100, $$103, $$106, _buf = nil, $case = nil, _slim_controls1 = nil, _slim_controls3 = nil, _slim_controls5 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.style;
        if ("qanda"['$===']($case)) {
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["qlist", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], ($$100 = function(){var self = $$100.$$s || this, $$101, _slim_controls2 = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<ol>");
          $send(self.$items(), 'each', [], ($$101 = function(questions, answer){var self = $$101.$$s || this, $$102;

          
            
            if (questions == null) {
              questions = nil;
            };
            
            if (answer == null) {
              answer = nil;
            };
            _slim_controls2['$<<']("<li>");
            $send([].concat(Opal.to_a(questions)), 'each', [], ($$102 = function(question){var self = $$102.$$s || this;

            
              
              if (question == null) {
                question = nil;
              };
              _slim_controls2['$<<']("<p><em>");
              _slim_controls2['$<<'](question.$text());
              return _slim_controls2['$<<']("</em></p>");}, $$102.$$s = self, $$102.$$arity = 1, $$102));
            if ($truthy(answer['$nil?']())) {
            } else {
              
              if ($truthy(answer['$text?']())) {
                
                _slim_controls2['$<<']("<p>");
                _slim_controls2['$<<'](answer.$text());
                _slim_controls2['$<<']("</p>");};
              if ($truthy(answer['$blocks?']())) {
                _slim_controls2['$<<'](answer.$content())};
            };
            return _slim_controls2['$<<']("</li>");}, $$101.$$s = self, $$101.$$arity = 2, $$101));
          _slim_controls2['$<<']("</ol>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$100.$$s = self, $$100.$$arity = 0, $$100));
        _buf['$<<'](_slim_controls1);}
        else if ("horizontal"['$===']($case)) {
        _slim_controls3 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["hdlist", self.$role()]}).$merge(self.$data_attrs(self.attributes))], ($$103 = function(){var self = $$103.$$s || this, $a, $$104, _slim_controls4 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;

        
          _slim_controls4 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls4['$<<']("<div class=\"title\">");
            _slim_controls4['$<<'](self.$title());
            _slim_controls4['$<<']("</div>");};
          _slim_controls4['$<<']("<table>");
          if ($truthy(($truthy($a = self['$attr?']("labelwidth")) ? $a : self['$attr?']("itemwidth")))) {
            
            _slim_controls4['$<<']("<colgroup><col");
            _slim_codeattributes1 = (function() {if ($truthy(self['$attr?']("labelwidth"))) {
              return "" + "width:" + (self.$attr("labelwidth").$chomp("%")) + "%;"
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes1)) {
              if (_slim_codeattributes1['$=='](true)) {
                _slim_controls4['$<<'](" style")
              } else {
                
                _slim_controls4['$<<'](" style=\"");
                _slim_controls4['$<<'](_slim_codeattributes1);
                _slim_controls4['$<<']("\"");
              }};
            _slim_controls4['$<<']("><col");
            _slim_codeattributes2 = (function() {if ($truthy(self['$attr?']("itemwidth"))) {
              return "" + "width:" + (self.$attr("itemwidth").$chomp("%")) + "%;"
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _slim_controls4['$<<'](" style")
              } else {
                
                _slim_controls4['$<<'](" style=\"");
                _slim_controls4['$<<'](_slim_codeattributes2);
                _slim_controls4['$<<']("\"");
              }};
            _slim_controls4['$<<']("></colgroup>");};
          $send(self.$items(), 'each', [], ($$104 = function(terms, dd){var self = $$104.$$s || this, $$105, _temple_html_attributeremover1 = nil, _slim_codeattributes3 = nil, last_term = nil;

          
            
            if (terms == null) {
              terms = nil;
            };
            
            if (dd == null) {
              dd = nil;
            };
            _slim_controls4['$<<']("<tr><td");
            _temple_html_attributeremover1 = [];
            _slim_codeattributes3 = ["hdlist1", (function() {if ($truthy(self['$option?']("strong"))) {
              return "strong"
            } else {
              return nil
            }; return nil; })()];
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
              
              _slim_codeattributes3 = _slim_codeattributes3.$flatten();
              $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover1['$<<'](_slim_codeattributes3.$join(" "));
            } else {
              _temple_html_attributeremover1['$<<'](_slim_codeattributes3)
            };
            _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
            if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
              
              _slim_controls4['$<<'](" class=\"");
              _slim_controls4['$<<'](_temple_html_attributeremover1);
              _slim_controls4['$<<']("\"");};
            _slim_controls4['$<<'](">");
            terms = [].concat(Opal.to_a(terms));
            last_term = terms.$last();
            $send(terms, 'each', [], ($$105 = function(dt){var self = $$105.$$s || this;

            
              
              if (dt == null) {
                dt = nil;
              };
              _slim_controls4['$<<'](dt.$text());
              if ($truthy(dt['$!='](last_term))) {
                return _slim_controls4['$<<']("<br>")
              } else {
                return nil
              };}, $$105.$$s = self, $$105.$$arity = 1, $$105));
            _slim_controls4['$<<']("</td><td class=\"hdlist2\">");
            if ($truthy(dd['$nil?']())) {
            } else {
              
              if ($truthy(dd['$text?']())) {
                
                _slim_controls4['$<<']("<p>");
                _slim_controls4['$<<'](dd.$text());
                _slim_controls4['$<<']("</p>");};
              if ($truthy(dd['$blocks?']())) {
                _slim_controls4['$<<'](dd.$content())};
            };
            return _slim_controls4['$<<']("</td></tr>");}, $$104.$$s = self, $$104.$$arity = 2, $$104));
          _slim_controls4['$<<']("</table>");
          return (_slim_controls4 = _slim_controls4.$join(""));}, $$103.$$s = self, $$103.$$arity = 0, $$103));
        _buf['$<<'](_slim_controls3);}
        else {
        _slim_controls5 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["dlist", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], ($$106 = function(){var self = $$106.$$s || this, $$107, _slim_controls6 = nil;

        
          _slim_controls6 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls6['$<<']("<div class=\"title\">");
            _slim_controls6['$<<'](self.$title());
            _slim_controls6['$<<']("</div>");};
          _slim_controls6['$<<']("<dl>");
          $send(self.$items(), 'each', [], ($$107 = function(terms, dd){var self = $$107.$$s || this, $$108;

          
            
            if (terms == null) {
              terms = nil;
            };
            
            if (dd == null) {
              dd = nil;
            };
            $send([].concat(Opal.to_a(terms)), 'each', [], ($$108 = function(dt){var self = $$108.$$s || this, _temple_html_attributeremover2 = nil, _slim_codeattributes4 = nil;
              if (self.style == null) self.style = nil;

            
              
              if (dt == null) {
                dt = nil;
              };
              _slim_controls6['$<<']("<dt");
              _temple_html_attributeremover2 = [];
              _slim_codeattributes4 = (function() {if ($truthy(self.style)) {
                return nil
              } else {
                return "hdlist1"
              }; return nil; })();
              if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
                
                _slim_codeattributes4 = _slim_codeattributes4.$flatten();
                $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributeremover2['$<<'](_slim_codeattributes4.$join(" "));
              } else {
                _temple_html_attributeremover2['$<<'](_slim_codeattributes4)
              };
              _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
              if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
                
                _slim_controls6['$<<'](" class=\"");
                _slim_controls6['$<<'](_temple_html_attributeremover2);
                _slim_controls6['$<<']("\"");};
              _slim_controls6['$<<'](">");
              _slim_controls6['$<<'](dt.$text());
              return _slim_controls6['$<<']("</dt>");}, $$108.$$s = self, $$108.$$arity = 1, $$108));
            if ($truthy(dd['$nil?']())) {
              return nil
            } else {
              
              _slim_controls6['$<<']("<dd>");
              if ($truthy(dd['$text?']())) {
                
                _slim_controls6['$<<']("<p>");
                _slim_controls6['$<<'](dd.$text());
                _slim_controls6['$<<']("</p>");};
              if ($truthy(dd['$blocks?']())) {
                _slim_controls6['$<<'](dd.$content())};
              return _slim_controls6['$<<']("</dd>");
            };}, $$107.$$s = self, $$107.$$arity = 2, $$107));
          _slim_controls6['$<<']("</dl>");
          return (_slim_controls6 = _slim_controls6.$join(""));}, $$106.$$s = self, $$106.$$arity = 0, $$106));
        _buf['$<<'](_slim_controls5);};
        return (_buf = _buf.$join(""));}, $$99.$$s = self, $$99.$$arity = 0, $$99));
    }, $Converter_dlist$98.$$arity = -2);
    
    Opal.def(self, '$example', $Converter_example$109 = function $$example(node, opts) {
      var $$110, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$110 = function(){var self = $$110.$$s || this, $a, $$111, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["exampleblock", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$111 = function(){var self = $$111.$$s || this, _slim_controls2 = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<div class=\"content\">");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$111.$$s = self, $$111.$$arity = 0, $$111));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$110.$$s = self, $$110.$$arity = 0, $$110));
    }, $Converter_example$109.$$arity = -2);
    
    Opal.def(self, '$listing', $Converter_listing$112 = function $$listing(node, opts) {
      var $$113, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$113 = function(){var self = $$113.$$s || this, $a, $$114, $$115, _buf = nil, nowrap = nil, syntax_hl = nil, lang = nil, doc_attrs = nil, css_mode = nil, style = nil, $writer = nil, _slim_controls1 = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        nowrap = ($truthy($a = self['$option?']("nowrap")) ? $a : self.$document()['$attr?']("prewrap")['$!']());
        if (self.style['$==']("source")) {
          
          syntax_hl = self.$document().$syntax_highlighter();
          lang = self.$attr("language");
          if ($truthy(syntax_hl)) {
            
            doc_attrs = self.$document().$attributes();
            css_mode = ($truthy($a = doc_attrs['$[]']("" + (syntax_hl.$name()) + "-css")) ? $a : "class").$to_sym();
            style = doc_attrs['$[]']("" + (syntax_hl.$name()) + "-style");
            opts = (function() {if ($truthy(syntax_hl['$highlight?']())) {
              return $hash2(["css_mode", "style"], {"css_mode": css_mode, "style": style})
            } else {
              return $hash2([], {})
            }; return nil; })();
            
            $writer = ["nowrap", nowrap];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};};
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.$id(), "class": ["listingblock", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs($send(self.attributes, 'reject', [], ($$114 = function(key, _){var self = $$114.$$s || this;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (_ == null) {
            _ = nil;
          };
          return key['$==']("data-id");}, $$114.$$s = self, $$114.$$arity = 2, $$114))))], ($$115 = function(){var self = $$115.$$s || this, $b, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil;
          if (self.style == null) self.style = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<div class=\"content\">");
          if ($truthy(syntax_hl)) {
            _slim_controls2['$<<'](syntax_hl.$format(self, lang, opts))
          } else if (self.style['$==']("source")) {
            
            _slim_controls2['$<<']("<pre");
            _temple_html_attributeremover1 = [];
            _slim_codeattributes1 = ["highlight", (function() {if ($truthy(nowrap)) {
              return "nowrap"
            } else {
              return nil
            }; return nil; })()];
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
              
              _slim_codeattributes1 = _slim_codeattributes1.$flatten();
              $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
            } else {
              _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
            };
            _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
            if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover1);
              _slim_controls2['$<<']("\"");};
            _slim_controls2['$<<']("><code");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes2 = [(function() {if ($truthy(lang)) {
              return "" + "language-" + (lang)
            } else {
              return nil
            }; return nil; })()];
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
              
              _slim_codeattributes2 = _slim_codeattributes2.$flatten();
              $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover2);
              _slim_controls2['$<<']("\"");};
            _slim_codeattributes3 = (function() {if ($truthy(lang)) {
              return "" + (lang)
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _slim_controls2['$<<'](" data-lang")
              } else {
                
                _slim_controls2['$<<'](" data-lang=\"");
                _slim_controls2['$<<'](_slim_codeattributes3);
                _slim_controls2['$<<']("\"");
              }};
            _slim_controls2['$<<'](">");
            _slim_controls2['$<<'](($truthy($b = self.$content()) ? $b : ""));
            _slim_controls2['$<<']("</code></pre>");
          } else {
            
            _slim_controls2['$<<']("<pre");
            _temple_html_attributeremover3 = [];
            _slim_codeattributes4 = [(function() {if ($truthy(nowrap)) {
              return "nowrap"
            } else {
              return nil
            }; return nil; })()];
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
              
              _slim_codeattributes4 = _slim_codeattributes4.$flatten();
              $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" "));
            } else {
              _temple_html_attributeremover3['$<<'](_slim_codeattributes4)
            };
            _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
            if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover3);
              _slim_controls2['$<<']("\"");};
            _slim_controls2['$<<'](">");
            _slim_controls2['$<<'](($truthy($b = self.$content()) ? $b : ""));
            _slim_controls2['$<<']("</pre>");
          };
          _slim_controls2['$<<']("</div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$115.$$s = self, $$115.$$arity = 0, $$115));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$113.$$s = self, $$113.$$arity = 0, $$113));
    }, $Converter_listing$112.$$arity = -2);
    
    Opal.def(self, '$inline_callout', $Converter_inline_callout$116 = function $$inline_callout(node, opts) {
      var $$117, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$117 = function(){var self = $$117.$$s || this, _buf = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.document['$attr?']("icons", "font"))) {
          
          _buf['$<<']("<i class=\"conum\"");
          _slim_codeattributes1 = self.text;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" data-value")
            } else {
              
              _buf['$<<'](" data-value=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></i><b>");
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>");
        } else if ($truthy(self.document['$attr?']("icons"))) {
          
          _buf['$<<']("<img");
          _slim_codeattributes2 = self.$icon_uri("" + "callouts/" + (self.text));
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" src")
            } else {
              
              _buf['$<<'](" src=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes3 = self.text;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" alt")
            } else {
              
              _buf['$<<'](" alt=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
        } else {
          
          _buf['$<<']("<b>");
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>");
        };
        return (_buf = _buf.$join(""));}, $$117.$$s = self, $$117.$$arity = 0, $$117));
    }, $Converter_inline_callout$116.$$arity = -2);
    
    Opal.def(self, '$section', $Converter_section$118 = function $$section(node, opts) {
      var $$119, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$119 = function(){var self = $$119.$$s || this, $a, $b, $$120, $$121, $$123, $$125, $$127, _buf = nil, titleless = nil, title = nil, hide_title = nil, vertical_slides = nil, data_background_image = nil, data_background_size = nil, data_background_repeat = nil, data_background_position = nil, data_background_transition = nil, section_images = nil, bg_image = nil, data_background_video = nil, data_background_color = nil, parent_section_with_vertical_slides = nil, _slim_htag_filter1 = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        titleless = (title = self.$title())['$==']("!");
        hide_title = ($truthy($a = ($truthy($b = titleless) ? $b : self['$option?']("notitle"))) ? $a : self['$option?']("conceal"));
        vertical_slides = $send(self, 'find_by', [$hash2(["context"], {"context": "section"})], ($$120 = function(section){var self = $$120.$$s || this;

        
          
          if (section == null) {
            section = nil;
          };
          return section.$level()['$=='](2);}, $$120.$$s = self, $$120.$$arity = 1, $$120));
        $b = nil, $a = Opal.to_ary($b), (data_background_image = ($a[0] == null ? nil : $a[0])), (data_background_size = ($a[1] == null ? nil : $a[1])), (data_background_repeat = ($a[2] == null ? nil : $a[2])), (data_background_position = ($a[3] == null ? nil : $a[3])), (data_background_transition = ($a[4] == null ? nil : $a[4])), $b;
        section_images = $send(self.$blocks(), 'map', [], ($$121 = function(block){var self = $$121.$$s || this, $c, $$122, ctx = nil;

        
          
          if (block == null) {
            block = nil;
          };
          if ((ctx = block.$context())['$==']("image")) {
            if ($truthy(["background", "canvas"]['$include?'](block.$attributes()['$[]'](1)))) {
              return block
            } else {
              return []
            }
          } else if (ctx['$==']("section")) {
            return []
          } else {
            return ($truthy($c = $send(block, 'find_by', [$hash2(["context"], {"context": "image"})], ($$122 = function(image){var self = $$122.$$s || this;

            
              
              if (image == null) {
                image = nil;
              };
              return ["background", "canvas"]['$include?'](image.$attributes()['$[]'](1));}, $$122.$$s = self, $$122.$$arity = 1, $$122))) ? $c : [])
          };}, $$121.$$s = self, $$121.$$arity = 1, $$121));
        if ($truthy((bg_image = section_images.$flatten().$first()))) {
          
          data_background_image = self.$image_uri(bg_image.$attr("target"));
          data_background_size = bg_image.$attr("size");
          data_background_repeat = bg_image.$attr("repeat");
          data_background_transition = bg_image.$attr("transition");
          data_background_position = bg_image.$attr("position");};
        if ($truthy(self['$attr?']("background-image"))) {
          data_background_image = self.$image_uri(self.$attr("background-image"))};
        if ($truthy(self['$attr?']("background-video"))) {
          data_background_video = self.$media_uri(self.$attr("background-video"))};
        if ($truthy(self['$attr?']("background-color"))) {
          data_background_color = self.$attr("background-color")};
        parent_section_with_vertical_slides = (($a = self.level['$=='](1)) ? vertical_slides['$empty?']()['$!']() : self.level['$=='](1));
        $send(self, 'content_for', ["footnotes"], ($$123 = function(){var self = $$123.$$s || this, $c, $d, $$124, slide_footnotes = nil;

        
          slide_footnotes = self.$slide_footnotes(self);
          if ($truthy(($truthy($c = ($truthy($d = self.$document()['$footnotes?']()) ? self.$parent()['$attr?']("nofootnotes")['$!']() : $d)) ? slide_footnotes['$empty?']()['$!']() : $c))) {
            
            _buf['$<<']("<div class=\"footnotes\">");
            $send(slide_footnotes, 'each', [], ($$124 = function(footnote){var self = $$124.$$s || this;

            
              
              if (footnote == null) {
                footnote = nil;
              };
              _buf['$<<']("<div class=\"footnote\">");
              _buf['$<<']("" + (footnote.$index()) + ". " + (footnote.$text()));
              return _buf['$<<']("</div>");}, $$124.$$s = self, $$124.$$arity = 1, $$124));
            return _buf['$<<']("</div>");
          } else {
            return nil
          };}, $$123.$$s = self, $$123.$$arity = 0, $$123));
        $send(self, 'content_for', ["section"], ($$125 = function(){var self = $$125.$$s || this, $c, $$126, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _blocks = nil, _content = nil;

        
          _buf['$<<']("<section");
          _slim_codeattributes1 = (function() {if ($truthy(titleless)) {
            return nil
          } else {
            return self.$id()
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _temple_html_attributeremover1 = [];
          _slim_codeattributes2 = self.$roles();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
            
            _slim_codeattributes2 = _slim_codeattributes2.$flatten();
            $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes3 = self.$attr("transition");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" data-transition")
            } else {
              
              _buf['$<<'](" data-transition=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes4 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" data-transition-speed")
            } else {
              
              _buf['$<<'](" data-transition-speed=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes5 = data_background_color;
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" data-background-color")
            } else {
              
              _buf['$<<'](" data-background-color=\"");
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes6 = data_background_image;
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" data-background-image")
            } else {
              
              _buf['$<<'](" data-background-image=\"");
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes7 = ($truthy($c = data_background_size) ? $c : self.$attr("background-size"));
          if ($truthy(_slim_codeattributes7)) {
            if (_slim_codeattributes7['$=='](true)) {
              _buf['$<<'](" data-background-size")
            } else {
              
              _buf['$<<'](" data-background-size=\"");
              _buf['$<<'](_slim_codeattributes7);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes8 = ($truthy($c = data_background_repeat) ? $c : self.$attr("background-repeat"));
          if ($truthy(_slim_codeattributes8)) {
            if (_slim_codeattributes8['$=='](true)) {
              _buf['$<<'](" data-background-repeat")
            } else {
              
              _buf['$<<'](" data-background-repeat=\"");
              _buf['$<<'](_slim_codeattributes8);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes9 = ($truthy($c = data_background_transition) ? $c : self.$attr("background-transition"));
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _buf['$<<'](" data-background-transition")
            } else {
              
              _buf['$<<'](" data-background-transition=\"");
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes10 = ($truthy($c = data_background_position) ? $c : self.$attr("background-position"));
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _buf['$<<'](" data-background-position")
            } else {
              
              _buf['$<<'](" data-background-position=\"");
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes11 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes11)) {
            if (_slim_codeattributes11['$=='](true)) {
              _buf['$<<'](" data-background-iframe")
            } else {
              
              _buf['$<<'](" data-background-iframe=\"");
              _buf['$<<'](_slim_codeattributes11);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes12 = data_background_video;
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _buf['$<<'](" data-background-video")
            } else {
              
              _buf['$<<'](" data-background-video=\"");
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes13 = ($truthy($c = self['$attr?']("background-video-loop")) ? $c : self['$option?']("loop"));
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _buf['$<<'](" data-background-video-loop")
            } else {
              
              _buf['$<<'](" data-background-video-loop=\"");
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes14 = ($truthy($c = self['$attr?']("background-video-muted")) ? $c : self['$option?']("muted"));
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _buf['$<<'](" data-background-video-muted")
            } else {
              
              _buf['$<<'](" data-background-video-muted=\"");
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes15 = self.$attr("background-opacity");
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _buf['$<<'](" data-background-opacity")
            } else {
              
              _buf['$<<'](" data-background-opacity=\"");
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes16 = self.$attr("autoslide");
          if ($truthy(_slim_codeattributes16)) {
            if (_slim_codeattributes16['$=='](true)) {
              _buf['$<<'](" data-autoslide")
            } else {
              
              _buf['$<<'](" data-autoslide=\"");
              _buf['$<<'](_slim_codeattributes16);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes17 = self.$attr("state");
          if ($truthy(_slim_codeattributes17)) {
            if (_slim_codeattributes17['$=='](true)) {
              _buf['$<<'](" data-state")
            } else {
              
              _buf['$<<'](" data-state=\"");
              _buf['$<<'](_slim_codeattributes17);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes18 = ($truthy($c = self['$attr?']("auto-animate")) ? $c : self['$option?']("auto-animate"));
          if ($truthy(_slim_codeattributes18)) {
            if (_slim_codeattributes18['$=='](true)) {
              _buf['$<<'](" data-auto-animate")
            } else {
              
              _buf['$<<'](" data-auto-animate=\"");
              _buf['$<<'](_slim_codeattributes18);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes19 = ($truthy($c = self.$attr("auto-animate-easing")) ? $c : self['$option?']("auto-animate-easing"));
          if ($truthy(_slim_codeattributes19)) {
            if (_slim_codeattributes19['$=='](true)) {
              _buf['$<<'](" data-auto-animate-easing")
            } else {
              
              _buf['$<<'](" data-auto-animate-easing=\"");
              _buf['$<<'](_slim_codeattributes19);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes20 = ($truthy($c = self.$attr("auto-animate-unmatched")) ? $c : self['$option?']("auto-animate-unmatched"));
          if ($truthy(_slim_codeattributes20)) {
            if (_slim_codeattributes20['$=='](true)) {
              _buf['$<<'](" data-auto-animate-unmatched")
            } else {
              
              _buf['$<<'](" data-auto-animate-unmatched=\"");
              _buf['$<<'](_slim_codeattributes20);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes21 = ($truthy($c = self.$attr("auto-animate-duration")) ? $c : self['$option?']("auto-animate-duration"));
          if ($truthy(_slim_codeattributes21)) {
            if (_slim_codeattributes21['$=='](true)) {
              _buf['$<<'](" data-auto-animate-duration")
            } else {
              
              _buf['$<<'](" data-auto-animate-duration=\"");
              _buf['$<<'](_slim_codeattributes21);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes22 = self.$attr("auto-animate-id");
          if ($truthy(_slim_codeattributes22)) {
            if (_slim_codeattributes22['$=='](true)) {
              _buf['$<<'](" data-auto-animate-id")
            } else {
              
              _buf['$<<'](" data-auto-animate-id=\"");
              _buf['$<<'](_slim_codeattributes22);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes23 = ($truthy($c = self['$attr?']("auto-animate-restart")) ? $c : self['$option?']("auto-animate-restart"));
          if ($truthy(_slim_codeattributes23)) {
            if (_slim_codeattributes23['$=='](true)) {
              _buf['$<<'](" data-auto-animate-restart")
            } else {
              
              _buf['$<<'](" data-auto-animate-restart=\"");
              _buf['$<<'](_slim_codeattributes23);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(hide_title)) {
          } else {
            
            _buf['$<<']("<h2>");
            _buf['$<<'](self.$section_title());
            _buf['$<<']("</h2>");
          };
          if ($truthy(parent_section_with_vertical_slides)) {
            
            if ($truthy((_blocks = $rb_minus(self.$blocks(), vertical_slides))['$empty?']())) {
            } else {
              
              _buf['$<<']("<div class=\"slide-content\">");
              $send(_blocks, 'each', [], ($$126 = function(block){var self = $$126.$$s || this;

              
                
                if (block == null) {
                  block = nil;
                };
                return _buf['$<<'](block.$convert());}, $$126.$$s = self, $$126.$$arity = 1, $$126));
              _buf['$<<']("</div>");
            };
            self.$yield_content("footnotes");
          } else {
            
            if ($truthy((_content = self.$content().$chomp())['$empty?']())) {
            } else {
              
              _buf['$<<']("<div class=\"slide-content\">");
              _buf['$<<'](_content);
              _buf['$<<']("</div>");
            };
            self.$yield_content("footnotes");
          };
          self.$clear_slide_footnotes();
          return _buf['$<<']("</section>");}, $$125.$$s = self, $$125.$$arity = 0, $$125));
        if ($truthy(parent_section_with_vertical_slides)) {
          
          _buf['$<<']("<section>");
          self.$yield_content("section");
          $send(vertical_slides, 'each', [], ($$127 = function(subsection){var self = $$127.$$s || this;

          
            
            if (subsection == null) {
              subsection = nil;
            };
            return _buf['$<<'](subsection.$convert());}, $$127.$$s = self, $$127.$$arity = 1, $$127));
          _buf['$<<']("</section>");
        } else if ($truthy($rb_ge(self.level, 3))) {
          
          _slim_htag_filter1 = self.level.$to_s();
          _buf['$<<']("<h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](title);
          _buf['$<<']("</h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](self.$content().$chomp());
        } else {
          self.$yield_content("section")
        };
        return (_buf = _buf.$join(""));}, $$119.$$s = self, $$119.$$arity = 0, $$119));
    }, $Converter_section$118.$$arity = -2);
    
    Opal.def(self, '$inline_button', $Converter_inline_button$128 = function $$inline_button(node, opts) {
      var $$129, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$129 = function(){var self = $$129.$$s || this, $$130, _buf = nil, _slim_controls1 = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["b", $hash2(["class"], {"class": ["button"]}).$merge(self.$data_attrs(self.attributes))], ($$130 = function(){var self = $$130.$$s || this, _slim_controls2 = nil;
          if (self.text == null) self.text = nil;

        
          _slim_controls2 = [];
          _slim_controls2['$<<'](self.text);
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$130.$$s = self, $$130.$$arity = 0, $$130));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$129.$$s = self, $$129.$$arity = 0, $$129));
    }, $Converter_inline_button$128.$$arity = -2);
    
    Opal.def(self, '$table', $Converter_table$131 = function $$table(node, opts) {
      var $$132, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$132 = function(){var self = $$132.$$s || this, $a, $$133, _buf = nil, classes = nil, styles = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        classes = ["tableblock", "" + "frame-" + (self.$attr("frame", "all")), "" + "grid-" + (self.$attr("grid", "all")), self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()];
        styles = [(function() {if ($truthy(self['$option?']("autowidth"))) {
          return nil
        } else {
          return "" + "width:" + (self.$attr("tablepcwidth")) + "%"
        }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float:" + (self.$attr("float"))
        } else {
          return nil
        }; return nil; })()].$compact().$join("; ");
        _slim_controls1 = $send(self, 'html_tag', ["table", $hash2(["id", "class", "style"], {"id": self.id, "class": classes, "style": styles}).$merge(self.$data_attrs(self.attributes))], ($$133 = function(){var self = $$133.$$s || this, $$134, $$135, $$136, $$137, _slim_controls2 = nil;
          if (self.columns == null) self.columns = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<caption class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</caption>");};
          if ($truthy(self.$attr("rowcount")['$zero?']())) {
          } else {
            
            _slim_controls2['$<<']("<colgroup>");
            if ($truthy(self['$option?']("autowidth"))) {
              $send(self.columns, 'each', [], ($$134 = function(){var self = $$134.$$s || this;

              return _slim_controls2['$<<']("<col>")}, $$134.$$s = self, $$134.$$arity = 0, $$134))
            } else {
              $send(self.columns, 'each', [], ($$135 = function(col){var self = $$135.$$s || this;

              
                
                if (col == null) {
                  col = nil;
                };
                _slim_controls2['$<<']("<col style=\"width:");
                _slim_controls2['$<<'](col.$attr("colpcwidth"));
                return _slim_controls2['$<<']("%\">");}, $$135.$$s = self, $$135.$$arity = 1, $$135))
            };
            _slim_controls2['$<<']("</colgroup>");
            $send($send(["head", "foot", "body"], 'select', [], ($$136 = function(tblsec){var self = $$136.$$s || this;
              if (self.rows == null) self.rows = nil;

            
              
              if (tblsec == null) {
                tblsec = nil;
              };
              return self.rows['$[]'](tblsec)['$empty?']()['$!']();}, $$136.$$s = self, $$136.$$arity = 1, $$136)), 'each', [], ($$137 = function(tblsec){var self = $$137.$$s || this, $$138;
              if (self.rows == null) self.rows = nil;

            
              
              if (tblsec == null) {
                tblsec = nil;
              };
              _slim_controls2['$<<']("<t");
              _slim_controls2['$<<'](tblsec);
              _slim_controls2['$<<'](">");
              return $send(self.rows['$[]'](tblsec), 'each', [], ($$138 = function(row){var self = $$138.$$s || this, $$139;

              
                
                if (row == null) {
                  row = nil;
                };
                _slim_controls2['$<<']("<tr>");
                $send(row, 'each', [], ($$139 = function(cell){var self = $$139.$$s || this, $b, $$140, cell_content = nil, $case = nil, _slim_controls3 = nil;
                  if (self.document == null) self.document = nil;

                
                  
                  if (cell == null) {
                    cell = nil;
                  };
                  if (tblsec['$==']("head")) {
                    cell_content = cell.$text()
                  } else {
                    $case = cell.$style();
                    if ("literal"['$===']($case)) {cell_content = cell.$text()}
                    else {cell_content = cell.$content()}
                  };
                  _slim_controls3 = $send(self, 'html_tag', [(function() {if ($truthy(($truthy($b = tblsec['$==']("head")) ? $b : cell.$style()['$==']("header")))) {
                    return "th"
                  } else {
                    return "td"
                  }; return nil; })(), $hash2(["class", "colspan", "rowspan", "style"], {"class": ["tableblock", "" + "halign-" + (cell.$attr("halign")), "" + "valign-" + (cell.$attr("valign"))], "colspan": cell.$colspan(), "rowspan": cell.$rowspan(), "style": (function() {if ($truthy(self.document['$attr?']("cellbgcolor"))) {
                    return "" + "background-color:" + (self.document.$attr("cellbgcolor")) + ";"
                  } else {
                    return nil
                  }; return nil; })()})], ($$140 = function(){var self = $$140.$$s || this, $$141, $$142, _slim_controls4 = nil;

                  
                    _slim_controls4 = [];
                    if (tblsec['$==']("head")) {
                      _slim_controls4['$<<'](cell_content)
                    } else {
                      $case = cell.$style();
                      if ("asciidoc"['$===']($case)) {
                      _slim_controls4['$<<']("<div>");
                      _slim_controls4['$<<'](cell_content);
                      _slim_controls4['$<<']("</div>");}
                      else if ("literal"['$===']($case)) {
                      _slim_controls4['$<<']("<div class=\"literal\"><pre>");
                      _slim_controls4['$<<'](cell_content);
                      _slim_controls4['$<<']("</pre></div>");}
                      else if ("header"['$===']($case)) {$send(cell_content, 'each', [], ($$141 = function(text){var self = $$141.$$s || this;

                      
                        
                        if (text == null) {
                          text = nil;
                        };
                        _slim_controls4['$<<']("<p class=\"tableblock header\">");
                        _slim_controls4['$<<'](text);
                        return _slim_controls4['$<<']("</p>");}, $$141.$$s = self, $$141.$$arity = 1, $$141))}
                      else {$send(cell_content, 'each', [], ($$142 = function(text){var self = $$142.$$s || this;

                      
                        
                        if (text == null) {
                          text = nil;
                        };
                        _slim_controls4['$<<']("<p class=\"tableblock\">");
                        _slim_controls4['$<<'](text);
                        return _slim_controls4['$<<']("</p>");}, $$142.$$s = self, $$142.$$arity = 1, $$142))}
                    };
                    return (_slim_controls4 = _slim_controls4.$join(""));}, $$140.$$s = self, $$140.$$arity = 0, $$140));
                  return _slim_controls2['$<<'](_slim_controls3);}, $$139.$$s = self, $$139.$$arity = 1, $$139));
                return _slim_controls2['$<<']("</tr>");}, $$138.$$s = self, $$138.$$arity = 1, $$138));}, $$137.$$s = self, $$137.$$arity = 1, $$137));
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$133.$$s = self, $$133.$$arity = 0, $$133));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$132.$$s = self, $$132.$$arity = 0, $$132));
    }, $Converter_table$131.$$arity = -2);
    
    Opal.def(self, '$document', $Converter_document$143 = function $$document(node, opts) {
      var $$144, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$144 = function(){var self = $$144.$$s || this, $$145, $a, $$146, _buf = nil, slides_content = nil, _slim_codeattributes16 = nil, revealjsdir = nil, asset_uri_scheme = nil, cdn_base = nil, icon_href = nil, icon_type = nil, icon_ext = nil, linkcss = nil, _slim_codeattributes19 = nil, iconfont_cdn = nil, _slim_codeattributes20 = nil, font_awesome_version = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, syntax_hl = nil, _slim_codeattributes24 = nil, customcss = nil, _docinfo = nil, docinfo_content = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        slides_content = self.$content();
        $send(self, 'content_for', ["slides"], ($$145 = function(){var self = $$145.$$s || this, $a, header_docinfo = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _title_obj = nil, _slice = nil, preamble = nil, footer_docinfo = nil;
          if (self.header == null) self.header = nil;
          if (self.document == null) self.document = nil;

        
          if ($truthy(self.$noheader())) {
          } else {
            
            if ($truthy((header_docinfo = self.$docinfo("header", "-revealjs.html"))['$empty?']())) {
            } else {
              _buf['$<<'](header_docinfo)
            };
            if ($truthy(self['$header?']())) {
              
              bg_image = (function() {if ($truthy(self['$attr?']("title-slide-background-image"))) {
                
                return self.$image_uri(self.$attr("title-slide-background-image"));
              } else {
                return nil
              }; return nil; })();
              bg_video = (function() {if ($truthy(self['$attr?']("title-slide-background-video"))) {
                
                return self.$media_uri(self.$attr("title-slide-background-video"));
              } else {
                return nil
              }; return nil; })();
              _buf['$<<']("<section");
              _temple_html_attributeremover1 = [];
              _temple_html_attributemerger1 = [];
              
              $writer = [0, "title"];
              $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [1, []];
              $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              _slim_codeattributes1 = self.$role();
              if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
                
                _slim_codeattributes1 = _slim_codeattributes1.$flatten();
                $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
              } else {
                _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
              };
              
              $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
              $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
              _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
              if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
                
                _buf['$<<'](" class=\"");
                _buf['$<<'](_temple_html_attributeremover1);
                _buf['$<<']("\"");};
              _buf['$<<'](" data-state=\"title\"");
              _slim_codeattributes2 = self.$attr("title-slide-transition");
              if ($truthy(_slim_codeattributes2)) {
                if (_slim_codeattributes2['$=='](true)) {
                  _buf['$<<'](" data-transition")
                } else {
                  
                  _buf['$<<'](" data-transition=\"");
                  _buf['$<<'](_slim_codeattributes2);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes3 = self.$attr("title-slide-transition-speed");
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _buf['$<<'](" data-transition-speed")
                } else {
                  
                  _buf['$<<'](" data-transition-speed=\"");
                  _buf['$<<'](_slim_codeattributes3);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes4 = self.$attr("title-slide-background");
              if ($truthy(_slim_codeattributes4)) {
                if (_slim_codeattributes4['$=='](true)) {
                  _buf['$<<'](" data-background")
                } else {
                  
                  _buf['$<<'](" data-background=\"");
                  _buf['$<<'](_slim_codeattributes4);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes5 = self.$attr("title-slide-background-size");
              if ($truthy(_slim_codeattributes5)) {
                if (_slim_codeattributes5['$=='](true)) {
                  _buf['$<<'](" data-background-size")
                } else {
                  
                  _buf['$<<'](" data-background-size=\"");
                  _buf['$<<'](_slim_codeattributes5);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes6 = bg_image;
              if ($truthy(_slim_codeattributes6)) {
                if (_slim_codeattributes6['$=='](true)) {
                  _buf['$<<'](" data-background-image")
                } else {
                  
                  _buf['$<<'](" data-background-image=\"");
                  _buf['$<<'](_slim_codeattributes6);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes7 = bg_video;
              if ($truthy(_slim_codeattributes7)) {
                if (_slim_codeattributes7['$=='](true)) {
                  _buf['$<<'](" data-background-video")
                } else {
                  
                  _buf['$<<'](" data-background-video=\"");
                  _buf['$<<'](_slim_codeattributes7);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes8 = self.$attr("title-slide-background-video-loop");
              if ($truthy(_slim_codeattributes8)) {
                if (_slim_codeattributes8['$=='](true)) {
                  _buf['$<<'](" data-background-video-loop")
                } else {
                  
                  _buf['$<<'](" data-background-video-loop=\"");
                  _buf['$<<'](_slim_codeattributes8);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes9 = self.$attr("title-slide-background-video-muted");
              if ($truthy(_slim_codeattributes9)) {
                if (_slim_codeattributes9['$=='](true)) {
                  _buf['$<<'](" data-background-video-muted")
                } else {
                  
                  _buf['$<<'](" data-background-video-muted=\"");
                  _buf['$<<'](_slim_codeattributes9);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes10 = self.$attr("title-slide-background-opacity");
              if ($truthy(_slim_codeattributes10)) {
                if (_slim_codeattributes10['$=='](true)) {
                  _buf['$<<'](" data-background-opacity")
                } else {
                  
                  _buf['$<<'](" data-background-opacity=\"");
                  _buf['$<<'](_slim_codeattributes10);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes11 = self.$attr("title-slide-background-iframe");
              if ($truthy(_slim_codeattributes11)) {
                if (_slim_codeattributes11['$=='](true)) {
                  _buf['$<<'](" data-background-iframe")
                } else {
                  
                  _buf['$<<'](" data-background-iframe=\"");
                  _buf['$<<'](_slim_codeattributes11);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes12 = self.$attr("title-slide-background-color");
              if ($truthy(_slim_codeattributes12)) {
                if (_slim_codeattributes12['$=='](true)) {
                  _buf['$<<'](" data-background-color")
                } else {
                  
                  _buf['$<<'](" data-background-color=\"");
                  _buf['$<<'](_slim_codeattributes12);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes13 = self.$attr("title-slide-background-repeat");
              if ($truthy(_slim_codeattributes13)) {
                if (_slim_codeattributes13['$=='](true)) {
                  _buf['$<<'](" data-background-repeat")
                } else {
                  
                  _buf['$<<'](" data-background-repeat=\"");
                  _buf['$<<'](_slim_codeattributes13);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes14 = self.$attr("title-slide-background-position");
              if ($truthy(_slim_codeattributes14)) {
                if (_slim_codeattributes14['$=='](true)) {
                  _buf['$<<'](" data-background-position")
                } else {
                  
                  _buf['$<<'](" data-background-position=\"");
                  _buf['$<<'](_slim_codeattributes14);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes15 = self.$attr("title-slide-background-transition");
              if ($truthy(_slim_codeattributes15)) {
                if (_slim_codeattributes15['$=='](true)) {
                  _buf['$<<'](" data-background-transition")
                } else {
                  
                  _buf['$<<'](" data-background-transition=\"");
                  _buf['$<<'](_slim_codeattributes15);
                  _buf['$<<']("\"");
                }};
              _buf['$<<'](">");
              if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
                
                _buf['$<<']("<h1>");
                _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
                _buf['$<<']("</h1><h2>");
                _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
                _buf['$<<']("</h2>");
              } else {
                
                _buf['$<<']("<h1>");
                _buf['$<<'](self.header.$title());
                _buf['$<<']("</h1>");
              };
              preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
              if ($truthy(($truthy($a = preamble['$nil?']()) ? $a : preamble.$length()['$=='](0)))) {
              } else {
                
                _buf['$<<']("<div class=\"preamble\">");
                _buf['$<<'](preamble.$pop().$content());
                _buf['$<<']("</div>");
              };
              _buf['$<<'](self.$generate_authors(self.document));
              _buf['$<<']("</section>");};
          };
          _buf['$<<'](slides_content);
          if ($truthy((footer_docinfo = self.$docinfo("footer", "-revealjs.html"))['$empty?']())) {
            return nil
          } else {
            return _buf['$<<'](footer_docinfo)
          };}, $$145.$$s = self, $$145.$$arity = 0, $$145));
        _buf['$<<']("<!DOCTYPE html><html");
        _slim_codeattributes16 = (function() {if ($truthy(self['$attr?']("nolang"))) {
          return nil
        } else {
          return self.$attr("lang", "en")
        }; return nil; })();
        if ($truthy(_slim_codeattributes16)) {
          if (_slim_codeattributes16['$=='](true)) {
            _buf['$<<'](" lang")
          } else {
            
            _buf['$<<'](" lang=\"");
            _buf['$<<'](_slim_codeattributes16);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\"><title>");
        _buf['$<<'](self.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true})));
        _buf['$<<']("</title>");
        if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$==']("opal")) ? $$($nesting, 'JAVASCRIPT_PLATFORM')['$==']("node") : $$($nesting, 'RUBY_ENGINE')['$==']("opal")))) {
          revealjsdir = self.$attr("revealjsdir", "node_modules/reveal.js")
        } else {
          revealjsdir = self.$attr("revealjsdir", "reveal.js")
        };
        if ($truthy((asset_uri_scheme = self.$attr("asset-uri-scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        $send(["description", "keywords", "author", "copyright"], 'each', [], ($$146 = function(key){var self = $$146.$$s || this, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil;

        
          
          if (key == null) {
            key = nil;
          };
          if ($truthy(self['$attr?'](key))) {
            
            _buf['$<<']("<meta");
            _slim_codeattributes17 = key;
            if ($truthy(_slim_codeattributes17)) {
              if (_slim_codeattributes17['$=='](true)) {
                _buf['$<<'](" name")
              } else {
                
                _buf['$<<'](" name=\"");
                _buf['$<<'](_slim_codeattributes17);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes18 = self.$attr(key);
            if ($truthy(_slim_codeattributes18)) {
              if (_slim_codeattributes18['$=='](true)) {
                _buf['$<<'](" content")
              } else {
                
                _buf['$<<'](" content=\"");
                _buf['$<<'](_slim_codeattributes18);
                _buf['$<<']("\"");
              }};
            return _buf['$<<'](">");
          } else {
            return nil
          };}, $$146.$$s = self, $$146.$$arity = 1, $$146));
        if ($truthy(self['$attr?']("favicon"))) {
          
          if ($truthy((icon_href = self.$attr("favicon"))['$empty?']())) {
            
            icon_href = "favicon.ico";
            icon_type = "image/x-icon";
          } else if ($truthy((icon_ext = $$($nesting, 'File').$extname(icon_href)))) {
            icon_type = (function() {if (icon_ext['$=='](".ico")) {
              return "image/x-icon"
            } else {
              return "" + "image/" + (icon_ext.$slice(1, icon_ext.$length()))
            }; return nil; })()
          } else {
            icon_type = "image/x-icon"
          };
          _buf['$<<']("<link rel=\"icon\" type=\"");
          _buf['$<<'](icon_type);
          _buf['$<<']("\" href=\"");
          _buf['$<<'](icon_href);
          _buf['$<<']("\">");};
        linkcss = self['$attr?']("linkcss");
        _buf['$<<']("<link rel=\"stylesheet\" href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/dist/reset.css\"><link rel=\"stylesheet\" href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/dist/reveal.css\"><link rel=\"stylesheet\"");
        _slim_codeattributes19 = self.$attr("revealjs_customtheme", "" + (revealjsdir) + "/dist/theme/" + (self.$attr("revealjs_theme", "black")) + ".css");
        if ($truthy(_slim_codeattributes19)) {
          if (_slim_codeattributes19['$=='](true)) {
            _buf['$<<'](" href")
          } else {
            
            _buf['$<<'](" href=\"");
            _buf['$<<'](_slim_codeattributes19);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](" id=\"theme\"><!--This CSS is generated by the Asciidoctor reveal.js converter to further integrate AsciiDoc's existing semantic with reveal.js--><style type=\"text/css\">.reveal div.right {\n  float: right\n}\n\n/* source blocks */\n.reveal .listingblock.stretch > .content {\n  height: 100%\n}\n\n.reveal .listingblock.stretch > .content > pre {\n  height: 100%\n}\n\n.reveal .listingblock.stretch > .content > pre > code {\n  height: 100%;\n  max-height: 100%\n}\n\n/* auto-animate feature */\n/* hide the scrollbar when auto-animating source blocks */\n.reveal pre[data-auto-animate-target] {\n  overflow: hidden;\n}\n\n.reveal pre[data-auto-animate-target] code {\n  overflow: hidden;\n}\n\n/* add a min width to avoid horizontal shift on line numbers */\ncode.hljs .hljs-ln-line.hljs-ln-n {\n  min-width: 1.25em;\n}\n\n/* tables */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0\n}\n\ntable {\n  margin-bottom: 1.25em;\n  border: solid 1px #dedede\n}\n\ntable thead tr th, table thead tr td, table tfoot tr th, table tfoot tr td {\n  padding: .5em .625em .625em;\n  font-size: inherit;\n  text-align: left\n}\n\ntable tr th, table tr td {\n  padding: .5625em .625em;\n  font-size: inherit\n}\n\ntable thead tr th, table tfoot tr th, table tbody tr td, table tr td, table tfoot tr td {\n  display: table-cell;\n  line-height: 1.6\n}\n\ntd.tableblock > .content {\n  margin-bottom: 1.25em\n}\n\ntd.tableblock > .content > :last-child {\n  margin-bottom: -1.25em\n}\n\ntable.tableblock, th.tableblock, td.tableblock {\n  border: 0 solid #dedede\n}\n\ntable.grid-all > thead > tr > .tableblock, table.grid-all > tbody > tr > .tableblock {\n  border-width: 0 1px 1px 0\n}\n\ntable.grid-all > tfoot > tr > .tableblock {\n  border-width: 1px 1px 0 0\n}\n\ntable.grid-cols > * > tr > .tableblock {\n  border-width: 0 1px 0 0\n}\n\ntable.grid-rows > thead > tr > .tableblock, table.grid-rows > tbody > tr > .tableblock {\n  border-width: 0 0 1px\n}\n\ntable.grid-rows > tfoot > tr > .tableblock {\n  border-width: 1px 0 0\n}\n\ntable.grid-all > * > tr > .tableblock:last-child, table.grid-cols > * > tr > .tableblock:last-child {\n  border-right-width: 0\n}\n\ntable.grid-all > tbody > tr:last-child > .tableblock, table.grid-all > thead:last-child > tr > .tableblock, table.grid-rows > tbody > tr:last-child > .tableblock, table.grid-rows > thead:last-child > tr > .tableblock {\n  border-bottom-width: 0\n}\n\ntable.frame-all {\n  border-width: 1px\n}\n\ntable.frame-sides {\n  border-width: 0 1px\n}\n\ntable.frame-topbot, table.frame-ends {\n  border-width: 1px 0\n}\n\n.reveal table th.halign-left, .reveal table td.halign-left {\n  text-align: left\n}\n\n.reveal table th.halign-right, .reveal table td.halign-right {\n  text-align: right\n}\n\n.reveal table th.halign-center, .reveal table td.halign-center {\n  text-align: center\n}\n\n.reveal table th.valign-top, .reveal table td.valign-top {\n  vertical-align: top\n}\n\n.reveal table th.valign-bottom, .reveal table td.valign-bottom {\n  vertical-align: bottom\n}\n\n.reveal table th.valign-middle, .reveal table td.valign-middle {\n  vertical-align: middle\n}\n\ntable thead th, table tfoot th {\n  font-weight: bold\n}\n\ntbody tr th {\n  display: table-cell;\n  line-height: 1.6\n}\n\ntbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p {\n  font-weight: bold\n}\n\nthead {\n  display: table-header-group\n}\n\n.reveal table.grid-none th, .reveal table.grid-none td {\n  border-bottom: 0 !important\n}\n\n/* kbd macro */\nkbd {\n  font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;\n  display: inline-block;\n  color: rgba(0, 0, 0, .8);\n  font-size: .65em;\n  line-height: 1.45;\n  background: #f7f7f7;\n  border: 1px solid #ccc;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  -webkit-box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em white inset;\n  box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em #fff inset;\n  margin: 0 .15em;\n  padding: .2em .5em;\n  vertical-align: middle;\n  position: relative;\n  top: -.1em;\n  white-space: nowrap\n}\n\n.keyseq kbd:first-child {\n  margin-left: 0\n}\n\n.keyseq kbd:last-child {\n  margin-right: 0\n}\n\n/* callouts */\n.conum[data-value] {\n  display: inline-block;\n  color: #fff !important;\n  background: rgba(0, 0, 0, .8);\n  -webkit-border-radius: 50%;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .75em;\n  width: 1.67em;\n  height: 1.67em;\n  line-height: 1.67em;\n  font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;\n  font-style: normal;\n  font-weight: bold\n}\n\n.conum[data-value] * {\n  color: #fff !important\n}\n\n.conum[data-value] + b {\n  display: none\n}\n\n.conum[data-value]:after {\n  content: attr(data-value)\n}\n\npre .conum[data-value] {\n  position: relative;\n  top: -.125em\n}\n\nb.conum * {\n  color: inherit !important\n}\n\n.conum:not([data-value]):empty {\n  display: none\n}\n\n/* Callout list */\n.hdlist > table, .colist > table {\n  border: 0;\n  background: none\n}\n\n.hdlist > table > tbody > tr, .colist > table > tbody > tr {\n  background: none\n}\n\ntd.hdlist1, td.hdlist2 {\n  vertical-align: top;\n  padding: 0 .625em\n}\n\ntd.hdlist1 {\n  font-weight: bold;\n  padding-bottom: 1.25em\n}\n\n/* Disabled from Asciidoctor CSS because it caused callout list to go under the\n * source listing when .stretch is applied (see #335)\n * .literalblock+.colist,.listingblock+.colist{margin-top:-.5em} */\n.colist td:not([class]):first-child {\n  padding: .4em .75em 0;\n  line-height: 1;\n  vertical-align: top\n}\n\n.colist td:not([class]):first-child img {\n  max-width: none\n}\n\n.colist td:not([class]):last-child {\n  padding: .25em 0\n}\n\n/* Override Asciidoctor CSS that causes issues with reveal.js features */\n.reveal .hljs table {\n  border: 0\n}\n\n/* Callout list rows would have a bottom border with some reveal.js themes (see #335) */\n.reveal .colist > table th, .reveal .colist > table td {\n  border-bottom: 0\n}\n\n/* Fixes line height with Highlight.js source listing when linenums enabled (see #331) */\n.reveal .hljs table thead tr th, .reveal .hljs table tfoot tr th, .reveal .hljs table tbody tr td, .reveal .hljs table tr td, .reveal .hljs table tfoot tr td {\n  line-height: inherit\n}\n\n/* Columns layout */\n.columns .slide-content {\n  display: flex;\n}\n\n.columns.wrap .slide-content {\n  flex-wrap: wrap;\n}\n\n.columns.is-vcentered .slide-content {\n  align-items: center;\n}\n\n.columns .slide-content > .column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n\n.columns .slide-content > .column > * {\n  padding: .75rem;\n}\n\n/* See #353 */\n.columns.wrap .slide-content > .column {\n  flex-basis: auto;\n}\n\n.columns .slide-content > .column.is-full {\n  flex: none;\n  width: 100%;\n}\n\n.columns .slide-content > .column.is-four-fifths {\n  flex: none;\n  width: 80%;\n}\n\n.columns .slide-content > .column.is-three-quarters {\n  flex: none;\n  width: 75%;\n}\n\n.columns .slide-content > .column.is-two-thirds {\n  flex: none;\n  width: 66.6666%;\n}\n\n.columns .slide-content > .column.is-three-fifths {\n  flex: none;\n  width: 60%;\n}\n\n.columns .slide-content > .column.is-half {\n  flex: none;\n  width: 50%;\n}\n\n.columns .slide-content > .column.is-two-fifths {\n  flex: none;\n  width: 40%;\n}\n\n.columns .slide-content > .column.is-one-third {\n  flex: none;\n  width: 33.3333%;\n}\n\n.columns .slide-content > .column.is-one-quarter {\n  flex: none;\n  width: 25%;\n}\n\n.columns .slide-content > .column.is-one-fifth {\n  flex: none;\n  width: 20%;\n}\n\n.columns .slide-content > .column.has-text-left {\n  text-align: left;\n}\n\n.columns .slide-content > .column.has-text-justified {\n  text-align: justify;\n}\n\n.columns .slide-content > .column.has-text-right {\n  text-align: right;\n}\n\n.columns .slide-content > .column.has-text-left {\n  text-align: left;\n}\n\n.columns .slide-content > .column.has-text-justified {\n  text-align: justify;\n}\n\n.columns .slide-content > .column.has-text-right {\n  text-align: right;\n}\n\n.text-left {\n  text-align: left !important\n}\n\n.text-right {\n  text-align: right !important\n}\n\n.text-center {\n  text-align: center !important\n}\n\n.text-justify {\n  text-align: justify !important\n}\n\n.footnotes {\n  border-top: 1px solid rgba(0, 0, 0, 0.2);\n  padding: 0.5em 0 0 0;\n  font-size: 0.65em;\n  margin-top: 4em;\n}\n\n.byline {\n  font-size:.8em\n}\nul.byline {\n  list-style-type: none;\n}\nul.byline li + li {\n  margin-top: 0.25em;\n}\n</style>");
        if ($truthy(self['$attr?']("icons", "font"))) {
          if ($truthy(self['$attr?']("iconfont-remote"))) {
            if ($truthy((iconfont_cdn = self.$attr("iconfont-cdn")))) {
              
              _buf['$<<']("<link rel=\"stylesheet\"");
              _slim_codeattributes20 = iconfont_cdn;
              if ($truthy(_slim_codeattributes20)) {
                if (_slim_codeattributes20['$=='](true)) {
                  _buf['$<<'](" href")
                } else {
                  
                  _buf['$<<'](" href=\"");
                  _buf['$<<'](_slim_codeattributes20);
                  _buf['$<<']("\"");
                }};
              _buf['$<<'](">");
            } else {
              
              font_awesome_version = self.$attr("font-awesome-version", "5.15.1");
              _buf['$<<']("<link rel=\"stylesheet\"");
              _slim_codeattributes21 = "" + (cdn_base) + "/font-awesome/" + (font_awesome_version) + "/css/all.min.css";
              if ($truthy(_slim_codeattributes21)) {
                if (_slim_codeattributes21['$=='](true)) {
                  _buf['$<<'](" href")
                } else {
                  
                  _buf['$<<'](" href=\"");
                  _buf['$<<'](_slim_codeattributes21);
                  _buf['$<<']("\"");
                }};
              _buf['$<<']("><link rel=\"stylesheet\"");
              _slim_codeattributes22 = "" + (cdn_base) + "/font-awesome/" + (font_awesome_version) + "/css/v4-shims.min.css";
              if ($truthy(_slim_codeattributes22)) {
                if (_slim_codeattributes22['$=='](true)) {
                  _buf['$<<'](" href")
                } else {
                  
                  _buf['$<<'](" href=\"");
                  _buf['$<<'](_slim_codeattributes22);
                  _buf['$<<']("\"");
                }};
              _buf['$<<'](">");
            }
          } else {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes23 = self.$normalize_web_path("" + (self.$attr("iconfont-name", "font-awesome")) + ".css", self.$attr("stylesdir", ""), false);
            if ($truthy(_slim_codeattributes23)) {
              if (_slim_codeattributes23['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes23);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          }};
        _buf['$<<'](self.$generate_stem(cdn_base));
        syntax_hl = self.$syntax_highlighter();
        if ($truthy(($truthy($a = syntax_hl) ? syntax_hl['$docinfo?']("head") : $a))) {
          _buf['$<<'](syntax_hl.$docinfo("head", self, $hash2(["cdn_base_url", "linkcss", "self_closing_tag_slash"], {"cdn_base_url": cdn_base, "linkcss": linkcss, "self_closing_tag_slash": "/"})))};
        if ($truthy(self['$attr?']("customcss"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"");
          _slim_codeattributes24 = (function() {if ($truthy((customcss = self.$attr("customcss"))['$empty?']())) {
            return "asciidoctor-revealjs.css"
          } else {
            return customcss
          }; return nil; })();
          if ($truthy(_slim_codeattributes24)) {
            if (_slim_codeattributes24['$=='](true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");};
        if ($truthy((_docinfo = self.$docinfo("head", "-revealjs.html"))['$empty?']())) {
        } else {
          _buf['$<<'](_docinfo)
        };
        _buf['$<<']("</head><body><div class=\"reveal\"><div class=\"slides\">");
        self.$yield_content("slides");
        _buf['$<<']("</div></div><script src=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/dist/reveal.js\"></script><script>Array.prototype.slice.call(document.querySelectorAll('.slides section')).forEach(function(slide) {\n  if (slide.getAttribute('data-background-color')) return;\n  // user needs to explicitly say he wants CSS color to override otherwise we might break custom css or theme (#226)\n  if (!(slide.classList.contains('canvas') || slide.classList.contains('background'))) return;\n  var bgColor = getComputedStyle(slide).backgroundColor;\n  if (bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {\n    slide.setAttribute('data-background-color', bgColor);\n    slide.style.backgroundColor = 'transparent';\n  }\n});\n\n// More info about config & dependencies:\n// - https://github.com/hakimel/reveal.js#configuration\n// - https://github.com/hakimel/reveal.js#dependencies\nReveal.initialize({\n  // Display presentation control arrows\n  controls: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controls", true)));
        _buf['$<<'](",\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controlstutorial", true)));
        _buf['$<<'](",\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: '");
        _buf['$<<'](self.$attr("revealjs_controlslayout", "bottom-right"));
        _buf['$<<']("',\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n  // or \"visible\"\n  controlsBackArrows: '");
        _buf['$<<'](self.$attr("revealjs_controlsbackarrows", "faded"));
        _buf['$<<']("',\n  // Display a presentation progress bar\n  progress: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_progress", true)));
        _buf['$<<'](",\n  // Display the page number of the current slide\n  slideNumber: ");
        _buf['$<<'](self.$to_valid_slidenumber(self.$attr("revealjs_slidenumber", false)));
        _buf['$<<'](",\n  // Control which views the slide number displays on\n  showSlideNumber: '");
        _buf['$<<'](self.$attr("revealjs_showslidenumber", "all"));
        _buf['$<<']("',\n  // Add the current slide number to the URL hash so that reloading the\n  // page/copying the URL will return you to the same slide\n  hash: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hash", false)));
        _buf['$<<'](",\n  // Push each slide change to the browser history. Implies `hash: true`\n  history: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_history", false)));
        _buf['$<<'](",\n  // Enable keyboard shortcuts for navigation\n  keyboard: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_keyboard", true)));
        _buf['$<<'](",\n  // Enable the slide overview mode\n  overview: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_overview", true)));
        _buf['$<<'](",\n  // Disables the default reveal.js slide layout so that you can use custom CSS layout\n  disableLayout: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_disablelayout", false)));
        _buf['$<<'](",\n  // Vertical centering of slides\n  center: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_center", true)));
        _buf['$<<'](",\n  // Enables touch navigation on devices with touch input\n  touch: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_touch", true)));
        _buf['$<<'](",\n  // Loop the presentation\n  loop: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_loop", false)));
        _buf['$<<'](",\n  // Change the presentation direction to be RTL\n  rtl: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_rtl", false)));
        _buf['$<<'](",\n  // See https://github.com/hakimel/reveal.js/#navigation-mode\n  navigationMode: '");
        _buf['$<<'](self.$attr("revealjs_navigationmode", "default"));
        _buf['$<<']("',\n  // Randomizes the order of slides each time the presentation loads\n  shuffle: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shuffle", false)));
        _buf['$<<'](",\n  // Turns fragments on and off globally\n  fragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragments", true)));
        _buf['$<<'](",\n  // Flags whether to include the current fragment in the URL,\n  // so that reloading brings you to the same fragment position\n  fragmentInURL: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragmentinurl", false)));
        _buf['$<<'](",\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_embedded", false)));
        _buf['$<<'](",\n  // Flags if we should show a help overlay when the questionmark\n  // key is pressed\n  help: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_help", true)));
        _buf['$<<'](",\n  // Flags if speaker notes should be visible to all viewers\n  showNotes: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shownotes", false)));
        _buf['$<<'](",\n  // Global override for autolaying embedded media (video/audio/iframe)\n  // - null: Media will only autoplay if data-autoplay is present\n  // - true: All media will autoplay, regardless of individual setting\n  // - false: No media will autoplay, regardless of individual setting\n  autoPlayMedia: ");
        _buf['$<<'](self.$attr("revealjs_autoplaymedia", "null"));
        _buf['$<<'](",\n  // Global override for preloading lazy-loaded iframes\n  // - null: Iframes with data-src AND data-preload will be loaded when within\n  //   the viewDistance, iframes with only data-src will be loaded when visible\n  // - true: All iframes with data-src will be loaded when within the viewDistance\n  // - false: All iframes with data-src will be loaded only when visible\n  preloadIframes: ");
        _buf['$<<'](self.$attr("revealjs_preloadiframes", "null"));
        _buf['$<<'](",\n  // Number of milliseconds between automatically proceeding to the\n  // next slide, disabled when set to 0, this value can be overwritten\n  // by using a data-autoslide attribute on your slides\n  autoSlide: ");
        _buf['$<<'](self.$attr("revealjs_autoslide", 0));
        _buf['$<<'](",\n  // Stop auto-sliding after user input\n  autoSlideStoppable: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_autoslidestoppable", true)));
        _buf['$<<'](",\n  // Use this method for navigation when auto-sliding\n  autoSlideMethod: ");
        _buf['$<<'](self.$attr("revealjs_autoslidemethod", "Reveal.navigateNext"));
        _buf['$<<'](",\n  // Specify the average time in seconds that you think you will spend\n  // presenting each slide. This is used to show a pacing timer in the\n  // speaker view\n  defaultTiming: ");
        _buf['$<<'](self.$attr("revealjs_defaulttiming", 120));
        _buf['$<<'](",\n  // Specify the total time in seconds that is available to\n  // present.  If this is set to a nonzero value, the pacing\n  // timer will work out the time available for each slide,\n  // instead of using the defaultTiming value\n  totalTime: ");
        _buf['$<<'](self.$attr("revealjs_totaltime", 0));
        _buf['$<<'](",\n  // Specify the minimum amount of time you want to allot to\n  // each slide, if using the totalTime calculation method.  If\n  // the automated time allocation causes slide pacing to fall\n  // below this threshold, then you will see an alert in the\n  // speaker notes window\n  minimumTimePerSlide: ");
        _buf['$<<'](self.$attr("revealjs_minimumtimeperslide", 0));
        _buf['$<<'](",\n  // Enable slide navigation via mouse wheel\n  mouseWheel: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_mousewheel", false)));
        _buf['$<<'](",\n  // Hide cursor if inactive\n  hideInactiveCursor: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideinactivecursor", true)));
        _buf['$<<'](",\n  // Time before the cursor is hidden (in ms)\n  hideCursorTime: ");
        _buf['$<<'](self.$attr("revealjs_hidecursortime", 5000));
        _buf['$<<'](",\n  // Hides the address bar on mobile devices\n  hideAddressBar: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideaddressbar", true)));
        _buf['$<<'](",\n  // Opens links in an iframe preview overlay\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n  // individually\n  previewLinks: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_previewlinks", false)));
        _buf['$<<'](",\n  // Transition style (e.g., none, fade, slide, convex, concave, zoom)\n  transition: '");
        _buf['$<<'](self.$attr("revealjs_transition", "slide"));
        _buf['$<<']("',\n  // Transition speed (e.g., default, fast, slow)\n  transitionSpeed: '");
        _buf['$<<'](self.$attr("revealjs_transitionspeed", "default"));
        _buf['$<<']("',\n  // Transition style for full page slide backgrounds (e.g., none, fade, slide, convex, concave, zoom)\n  backgroundTransition: '");
        _buf['$<<'](self.$attr("revealjs_backgroundtransition", "fade"));
        _buf['$<<']("',\n  // Number of slides away from the current that are visible\n  viewDistance: ");
        _buf['$<<'](self.$attr("revealjs_viewdistance", 3));
        _buf['$<<'](",\n  // Number of slides away from the current that are visible on mobile\n  // devices. It is advisable to set this to a lower number than\n  // viewDistance in order to save resources.\n  mobileViewDistance: ");
        _buf['$<<'](self.$attr("revealjs_mobileviewdistance", 3));
        _buf['$<<'](",\n  // Parallax background image (e.g., \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\")\n  parallaxBackgroundImage: '");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundimage", ""));
        _buf['$<<']("',\n  // Parallax background size in CSS syntax (e.g., \"2100px 900px\")\n  parallaxBackgroundSize: '");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundsize", ""));
        _buf['$<<']("',\n  // Number of pixels to move the parallax background per slide\n  // - Calculated automatically unless specified\n  // - Set to 0 to disable movement along an axis\n  parallaxBackgroundHorizontal: ");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundhorizontal", "null"));
        _buf['$<<'](",\n  parallaxBackgroundVertical: ");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundvertical", "null"));
        _buf['$<<'](",\n  // The display mode that will be used to show slides\n  display: '");
        _buf['$<<'](self.$attr("revealjs_display", "block"));
        _buf['$<<']("',\n\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions. Can be\n  // specified using percentage units.\n  width: ");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](",\n  height: ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](",\n\n  // Factor of the display size that should remain empty around the content\n  margin: ");
        _buf['$<<'](self.$attr("revealjs_margin", 0.1));
        _buf['$<<'](",\n\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: ");
        _buf['$<<'](self.$attr("revealjs_minscale", 0.2));
        _buf['$<<'](",\n  maxScale: ");
        _buf['$<<'](self.$attr("revealjs_maxscale", 1.5));
        _buf['$<<'](",\n\n  // PDF Export Options\n  // Put each fragment on a separate page\n  pdfSeparateFragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_pdfseparatefragments", true)));
        _buf['$<<'](",\n  // For slides that do not fit on a page, max number of pages\n  pdfMaxPagesPerSlide: ");
        _buf['$<<'](self.$attr("revealjs_pdfmaxpagesperslide", 1));
        _buf['$<<'](",\n\n  // Optional libraries used to extend on reveal.js\n  dependencies: [\n      ");
        _buf['$<<'](self.$revealjs_dependencies(self.$document(), self, revealjsdir));
        _buf['$<<']("\n  ],\n});</script><script>var dom = {};\ndom.slides = document.querySelector('.reveal .slides');\n\nfunction getRemainingHeight(element, slideElement, height) {\n  height = height || 0;\n  if (element) {\n    var newHeight, oldHeight = element.style.height;\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = '0px';\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    slideElement.style.height = 'auto';\n    newHeight = height - slideElement.offsetHeight;\n    // Restore the old height, just in case\n    element.style.height = oldHeight + 'px';\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    slideElement.style.removeProperty('height');\n    return newHeight;\n  }\n  return height;\n}\n\nfunction layoutSlideContents(width, height) {\n  // Handle sizing of elements with the 'stretch' class\n  toArray(dom.slides.querySelectorAll('section .stretch')).forEach(function (element) {\n    // Determine how much vertical space we can use\n    var limit = 5; // hard limit\n    var parent = element.parentNode;\n    while (parent.nodeName !== 'SECTION' && limit > 0) {\n      parent = parent.parentNode;\n      limit--;\n    }\n    if (limit === 0) {\n      // unable to find parent, aborting!\n      return;\n    }\n    var remainingHeight = getRemainingHeight(element, parent, height);\n    // Consider the aspect ratio of media elements\n    if (/(img|video)/gi.test(element.nodeName)) {\n      var nw = element.naturalWidth || element.videoWidth, nh = element.naturalHeight || element.videoHeight;\n      var es = Math.min(width / nw, remainingHeight / nh);\n      element.style.width = (nw * es) + 'px';\n      element.style.height = (nh * es) + 'px';\n    } else {\n      element.style.width = width + 'px';\n      element.style.height = remainingHeight + 'px';\n    }\n  });\n}\n\nfunction toArray(o) {\n  return Array.prototype.slice.call(o);\n}\n\nReveal.addEventListener('slidechanged', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('ready', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('resize', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});</script>");
        if ($truthy(($truthy($a = syntax_hl) ? syntax_hl['$docinfo?']("footer") : $a))) {
          _buf['$<<'](syntax_hl.$docinfo("footer", self, $hash2(["cdn_base_url", "linkcss", "self_closing_tag_slash"], {"cdn_base_url": cdn_base, "linkcss": linkcss, "self_closing_tag_slash": "/"})))};
        if ($truthy((docinfo_content = self.$docinfo("footer", ".html"))['$empty?']())) {
        } else {
          _buf['$<<'](docinfo_content)
        };
        _buf['$<<']("</body></html>");
        return (_buf = _buf.$join(""));}, $$144.$$s = self, $$144.$$arity = 0, $$144));
    }, $Converter_document$143.$$arity = -2);
    
    Opal.def(self, '$literal', $Converter_literal$147 = function $$literal(node, opts) {
      var $$148, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$148 = function(){var self = $$148.$$s || this, $a, $$149, _buf = nil, _slim_controls1 = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.$id(), "class": ["literalblock", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$149 = function(){var self = $$149.$$s || this, $b, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;
          if (self.document == null) self.document = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<div class=\"content\"><pre");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = (function() {if ($truthy(($truthy($b = self.document['$attr?']("prewrap")['$!']()) ? $b : self['$option?']("nowrap")))) {
            return "nowrap"
          } else {
            return nil
          }; return nil; })();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _slim_controls2['$<<'](" class=\"");
            _slim_controls2['$<<'](_temple_html_attributeremover1);
            _slim_controls2['$<<']("\"");};
          _slim_controls2['$<<'](">");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</pre></div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$149.$$s = self, $$149.$$arity = 0, $$149));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$148.$$s = self, $$148.$$arity = 0, $$148));
    }, $Converter_literal$147.$$arity = -2);
    
    Opal.def(self, '$verse', $Converter_verse$150 = function $$verse(node, opts) {
      var $$151, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$151 = function(){var self = $$151.$$s || this, $a, $$152, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["verseblock", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$152 = function(){var self = $$152.$$s || this, $b, _slim_controls2 = nil, attribution = nil, citetitle = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<pre class=\"content\">");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</pre>");
          attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
            
            return self.$attr("attribution");
          } else {
            return nil
          }; return nil; })();
          citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
            
            return self.$attr("citetitle");
          } else {
            return nil
          }; return nil; })();
          if ($truthy(($truthy($b = attribution) ? $b : citetitle))) {
            
            _slim_controls2['$<<']("<div class=\"attribution\">");
            if ($truthy(citetitle)) {
              
              _slim_controls2['$<<']("<cite>");
              _slim_controls2['$<<'](citetitle);
              _slim_controls2['$<<']("</cite>");};
            if ($truthy(attribution)) {
              
              if ($truthy(citetitle)) {
                _slim_controls2['$<<']("<br>")};
              _slim_controls2['$<<']("&#8212; ");
              _slim_controls2['$<<'](attribution);};
            _slim_controls2['$<<']("</div>");};
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$152.$$s = self, $$152.$$arity = 0, $$152));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$151.$$s = self, $$151.$$arity = 0, $$151));
    }, $Converter_verse$150.$$arity = -2);
    
    Opal.def(self, '$audio', $Converter_audio$153 = function $$audio(node, opts) {
      var $$154, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$154 = function(){var self = $$154.$$s || this, $$155, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["audioblock", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], ($$155 = function(){var self = $$155.$$s || this, _slim_controls2 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<div class=\"content\"><audio");
          _slim_codeattributes1 = self.$media_uri(self.$attr("target"));
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _slim_controls2['$<<'](" src")
            } else {
              
              _slim_controls2['$<<'](" src=\"");
              _slim_controls2['$<<'](_slim_codeattributes1);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes2 = self['$option?']("autoplay");
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _slim_controls2['$<<'](" autoplay")
            } else {
              
              _slim_controls2['$<<'](" autoplay=\"");
              _slim_controls2['$<<'](_slim_codeattributes2);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes3 = self['$option?']("nocontrols")['$!']();
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _slim_controls2['$<<'](" controls")
            } else {
              
              _slim_controls2['$<<'](" controls=\"");
              _slim_controls2['$<<'](_slim_codeattributes3);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes4 = self['$option?']("loop");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _slim_controls2['$<<'](" loop")
            } else {
              
              _slim_controls2['$<<'](" loop=\"");
              _slim_controls2['$<<'](_slim_codeattributes4);
              _slim_controls2['$<<']("\"");
            }};
          _slim_controls2['$<<'](">Your browser does not support the audio tag.</audio></div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$155.$$s = self, $$155.$$arity = 0, $$155));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$154.$$s = self, $$154.$$arity = 0, $$154));
    }, $Converter_audio$153.$$arity = -2);
    
    Opal.def(self, '$inline_image', $Converter_inline_image$156 = function $$inline_image(node, opts) {
      var $$157, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$157 = function(){var self = $$157.$$s || this, $a, $$158, _buf = nil, _slim_controls1 = nil;
        if (self.type == null) self.type = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["span", $hash2(["class", "style"], {"class": [self.type, self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()], "style": (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float: " + (self.$attr("float"))
        } else {
          return nil
        }; return nil; })()}).$merge(self.$data_attrs(self.attributes))], ($$158 = function(){var self = $$158.$$s || this, $b, _slim_controls2 = nil, style_class = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, src = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil;
          if (self.type == null) self.type = nil;
          if (self.document == null) self.document = nil;
          if (self.target == null) self.target = nil;

        
          _slim_controls2 = [];
          if ($truthy((($b = self.type['$==']("icon")) ? self.document['$attr?']("icons", "font") : self.type['$==']("icon")))) {
            
            style_class = [self.$attr("set", "fa"), "" + "fa-" + (self.target), (function() {if ($truthy(self['$attr?']("size"))) {
              return "" + "fa-" + (self.$attr("size"))
            } else {
              return nil
            }; return nil; })(), (function() {if ($truthy(self['$attr?']("rotate"))) {
              return "" + "fa-rotate-" + (self.$attr("rotate"))
            } else {
              return nil
            }; return nil; })(), (function() {if ($truthy(self['$attr?']("flip"))) {
              return "" + "fa-flip-" + (self.$attr("flip"))
            } else {
              return nil
            }; return nil; })()];
            if ($truthy(self['$attr?']("link"))) {
              
              _slim_controls2['$<<']("<a class=\"image\"");
              _slim_codeattributes1 = self.$attr("link");
              if ($truthy(_slim_codeattributes1)) {
                if (_slim_codeattributes1['$=='](true)) {
                  _slim_controls2['$<<'](" href")
                } else {
                  
                  _slim_controls2['$<<'](" href=\"");
                  _slim_controls2['$<<'](_slim_codeattributes1);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes2 = self.$attr("window");
              if ($truthy(_slim_codeattributes2)) {
                if (_slim_codeattributes2['$=='](true)) {
                  _slim_controls2['$<<'](" target")
                } else {
                  
                  _slim_controls2['$<<'](" target=\"");
                  _slim_controls2['$<<'](_slim_codeattributes2);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes3 = self.$bool_data_attr("link_preview");
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _slim_controls2['$<<'](" data-preview-link")
                } else {
                  
                  _slim_controls2['$<<'](" data-preview-link=\"");
                  _slim_controls2['$<<'](_slim_codeattributes3);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("><i");
              _temple_html_attributeremover1 = [];
              _slim_codeattributes4 = style_class;
              if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
                
                _slim_codeattributes4 = _slim_codeattributes4.$flatten();
                $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributeremover1['$<<'](_slim_codeattributes4.$join(" "));
              } else {
                _temple_html_attributeremover1['$<<'](_slim_codeattributes4)
              };
              _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
              if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
                
                _slim_controls2['$<<'](" class=\"");
                _slim_controls2['$<<'](_temple_html_attributeremover1);
                _slim_controls2['$<<']("\"");};
              _slim_codeattributes5 = self.$attr("title");
              if ($truthy(_slim_codeattributes5)) {
                if (_slim_codeattributes5['$=='](true)) {
                  _slim_controls2['$<<'](" title")
                } else {
                  
                  _slim_controls2['$<<'](" title=\"");
                  _slim_controls2['$<<'](_slim_codeattributes5);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("></i></a>");
            } else {
              
              _slim_controls2['$<<']("<i");
              _temple_html_attributeremover2 = [];
              _slim_codeattributes6 = style_class;
              if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
                
                _slim_codeattributes6 = _slim_codeattributes6.$flatten();
                $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributeremover2['$<<'](_slim_codeattributes6.$join(" "));
              } else {
                _temple_html_attributeremover2['$<<'](_slim_codeattributes6)
              };
              _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
              if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
                
                _slim_controls2['$<<'](" class=\"");
                _slim_controls2['$<<'](_temple_html_attributeremover2);
                _slim_controls2['$<<']("\"");};
              _slim_codeattributes7 = self.$attr("title");
              if ($truthy(_slim_codeattributes7)) {
                if (_slim_codeattributes7['$=='](true)) {
                  _slim_controls2['$<<'](" title")
                } else {
                  
                  _slim_controls2['$<<'](" title=\"");
                  _slim_controls2['$<<'](_slim_codeattributes7);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("></i>");
            };
          } else if ($truthy((($b = self.type['$==']("icon")) ? self.document['$attr?']("icons")['$!']() : self.type['$==']("icon")))) {
            if ($truthy(self['$attr?']("link"))) {
              
              _slim_controls2['$<<']("<a class=\"image\"");
              _slim_codeattributes8 = self.$attr("link");
              if ($truthy(_slim_codeattributes8)) {
                if (_slim_codeattributes8['$=='](true)) {
                  _slim_controls2['$<<'](" href")
                } else {
                  
                  _slim_controls2['$<<'](" href=\"");
                  _slim_controls2['$<<'](_slim_codeattributes8);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes9 = self.$attr("window");
              if ($truthy(_slim_codeattributes9)) {
                if (_slim_codeattributes9['$=='](true)) {
                  _slim_controls2['$<<'](" target")
                } else {
                  
                  _slim_controls2['$<<'](" target=\"");
                  _slim_controls2['$<<'](_slim_codeattributes9);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes10 = self.$bool_data_attr("link_preview");
              if ($truthy(_slim_codeattributes10)) {
                if (_slim_codeattributes10['$=='](true)) {
                  _slim_controls2['$<<'](" data-preview-link")
                } else {
                  
                  _slim_controls2['$<<'](" data-preview-link=\"");
                  _slim_controls2['$<<'](_slim_codeattributes10);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<'](">[");
              _slim_controls2['$<<'](self.$attr("alt"));
              _slim_controls2['$<<']("]</a>");
            } else {
              
              _slim_controls2['$<<']("[");
              _slim_controls2['$<<'](self.$attr("alt"));
              _slim_controls2['$<<']("]");
            }
          } else {
            
            src = (function() {if (self.type['$==']("icon")) {
              
              return self.$icon_uri(self.target);
            } else {
              
              return self.$image_uri(self.target);
            }; return nil; })();
            if ($truthy(self['$attr?']("link"))) {
              
              _slim_controls2['$<<']("<a class=\"image\"");
              _slim_codeattributes11 = self.$attr("link");
              if ($truthy(_slim_codeattributes11)) {
                if (_slim_codeattributes11['$=='](true)) {
                  _slim_controls2['$<<'](" href")
                } else {
                  
                  _slim_controls2['$<<'](" href=\"");
                  _slim_controls2['$<<'](_slim_codeattributes11);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes12 = self.$attr("window");
              if ($truthy(_slim_codeattributes12)) {
                if (_slim_codeattributes12['$=='](true)) {
                  _slim_controls2['$<<'](" target")
                } else {
                  
                  _slim_controls2['$<<'](" target=\"");
                  _slim_controls2['$<<'](_slim_codeattributes12);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes13 = self.$bool_data_attr("link_preview");
              if ($truthy(_slim_codeattributes13)) {
                if (_slim_codeattributes13['$=='](true)) {
                  _slim_controls2['$<<'](" data-preview-link")
                } else {
                  
                  _slim_controls2['$<<'](" data-preview-link=\"");
                  _slim_controls2['$<<'](_slim_codeattributes13);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("><img");
              _slim_codeattributes14 = src;
              if ($truthy(_slim_codeattributes14)) {
                if (_slim_codeattributes14['$=='](true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes14);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes15 = self.$attr("alt");
              if ($truthy(_slim_codeattributes15)) {
                if (_slim_codeattributes15['$=='](true)) {
                  _slim_controls2['$<<'](" alt")
                } else {
                  
                  _slim_controls2['$<<'](" alt=\"");
                  _slim_controls2['$<<'](_slim_codeattributes15);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes16 = self.$attr("width");
              if ($truthy(_slim_codeattributes16)) {
                if (_slim_codeattributes16['$=='](true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes16);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes17 = self.$attr("height");
              if ($truthy(_slim_codeattributes17)) {
                if (_slim_codeattributes17['$=='](true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes17);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes18 = self.$attr("title");
              if ($truthy(_slim_codeattributes18)) {
                if (_slim_codeattributes18['$=='](true)) {
                  _slim_controls2['$<<'](" title")
                } else {
                  
                  _slim_controls2['$<<'](" title=\"");
                  _slim_controls2['$<<'](_slim_codeattributes18);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<']("></a>");
            } else {
              
              _slim_controls2['$<<']("<img");
              _slim_codeattributes19 = src;
              if ($truthy(_slim_codeattributes19)) {
                if (_slim_codeattributes19['$=='](true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes19);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes20 = self.$attr("alt");
              if ($truthy(_slim_codeattributes20)) {
                if (_slim_codeattributes20['$=='](true)) {
                  _slim_controls2['$<<'](" alt")
                } else {
                  
                  _slim_controls2['$<<'](" alt=\"");
                  _slim_controls2['$<<'](_slim_codeattributes20);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes21 = self.$attr("width");
              if ($truthy(_slim_codeattributes21)) {
                if (_slim_codeattributes21['$=='](true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes21);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes22 = self.$attr("height");
              if ($truthy(_slim_codeattributes22)) {
                if (_slim_codeattributes22['$=='](true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes22);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_codeattributes23 = self.$attr("title");
              if ($truthy(_slim_codeattributes23)) {
                if (_slim_codeattributes23['$=='](true)) {
                  _slim_controls2['$<<'](" title")
                } else {
                  
                  _slim_controls2['$<<'](" title=\"");
                  _slim_controls2['$<<'](_slim_codeattributes23);
                  _slim_controls2['$<<']("\"");
                }};
              _slim_controls2['$<<'](">");
            };
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$158.$$s = self, $$158.$$arity = 0, $$158));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$157.$$s = self, $$157.$$arity = 0, $$157));
    }, $Converter_inline_image$156.$$arity = -2);
    
    Opal.def(self, '$notes', $Converter_notes$159 = function $$notes(node, opts) {
      var $$160, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$160 = function(){var self = $$160.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<aside class=\"notes\">");
        _buf['$<<'](self.$resolve_content());
        _buf['$<<']("</aside>");
        return (_buf = _buf.$join(""));}, $$160.$$s = self, $$160.$$arity = 0, $$160));
    }, $Converter_notes$159.$$arity = -2);
    
    Opal.def(self, '$open', $Converter_open$161 = function $$open(node, opts) {
      var $$162, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$162 = function(){var self = $$162.$$s || this, $a, $$163, $b, $c, $$164, _buf = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.style == null) self.style = nil;
        if (self.parent == null) self.parent = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.style['$==']("abstract")) {
          if ($truthy((($a = self.parent['$=='](self.document)) ? self.document.$doctype()['$==']("book") : self.parent['$=='](self.document)))) {
            self.$puts("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.")
          } else {
            
            _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["quoteblock", "abstract", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
              return "fragment"
            } else {
              return nil
            }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$163 = function(){var self = $$163.$$s || this, _slim_controls2 = nil;

            
              _slim_controls2 = [];
              if ($truthy(self['$title?']())) {
                
                _slim_controls2['$<<']("<div class=\"title\">");
                _slim_controls2['$<<'](self.$title());
                _slim_controls2['$<<']("</div>");};
              _slim_controls2['$<<']("<blockquote>");
              _slim_controls2['$<<'](self.$content());
              _slim_controls2['$<<']("</blockquote>");
              return (_slim_controls2 = _slim_controls2.$join(""));}, $$163.$$s = self, $$163.$$arity = 0, $$163));
            _buf['$<<'](_slim_controls1);
          }
        } else if ($truthy((($a = self.style['$==']("partintro")) ? ($truthy($b = ($truthy($c = self.level['$!='](0)) ? $c : self.parent.$context()['$!=']("section"))) ? $b : self.document.$doctype()['$!=']("book")) : self.style['$==']("partintro")))) {
          self.$puts("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.")
        } else if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _slim_controls3 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["openblock", (function() {if ($truthy(self.style['$!=']("open"))) {
            return self.style
          } else {
            return nil
          }; return nil; })(), self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$164 = function(){var self = $$164.$$s || this, _slim_controls4 = nil;

          
            _slim_controls4 = [];
            if ($truthy(self['$title?']())) {
              
              _slim_controls4['$<<']("<div class=\"title\">");
              _slim_controls4['$<<'](self.$title());
              _slim_controls4['$<<']("</div>");};
            _slim_controls4['$<<']("<div class=\"content\">");
            _slim_controls4['$<<'](self.$content());
            _slim_controls4['$<<']("</div>");
            return (_slim_controls4 = _slim_controls4.$join(""));}, $$164.$$s = self, $$164.$$arity = 0, $$164));
          _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, $$162.$$s = self, $$162.$$arity = 0, $$162));
    }, $Converter_open$161.$$arity = -2);
    
    Opal.def(self, '$preamble', $Converter_preamble$165 = function $$preamble(node, opts) {
      var $$166, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$166 = function(){var self = $$166.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        return (_buf = _buf.$join(""));}, $$166.$$s = self, $$166.$$arity = 0, $$166));
    }, $Converter_preamble$165.$$arity = -2);
    
    Opal.def(self, '$inline_kbd', $Converter_inline_kbd$167 = function $$inline_kbd(node, opts) {
      var $$168, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$168 = function(){var self = $$168.$$s || this, $$169, $$170, _buf = nil, keys = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ((keys = self.$attr("keys")).$size()['$=='](1)) {
          
          _slim_controls1 = $send(self, 'html_tag', ["kbd", self.$data_attrs(self.attributes)], ($$169 = function(){var self = $$169.$$s || this, _slim_controls2 = nil;

          
            _slim_controls2 = [];
            _slim_controls2['$<<'](keys.$first());
            return (_slim_controls2 = _slim_controls2.$join(""));}, $$169.$$s = self, $$169.$$arity = 0, $$169));
          _buf['$<<'](_slim_controls1);
        } else {
          
          _slim_controls3 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["keyseq"]}).$merge(self.$data_attrs(self.attributes))], ($$170 = function(){var self = $$170.$$s || this, $$171, _slim_controls4 = nil;

          
            _slim_controls4 = [];
            $send(keys, 'each_with_index', [], ($$171 = function(key, idx){var self = $$171.$$s || this;

            
              
              if (key == null) {
                key = nil;
              };
              
              if (idx == null) {
                idx = nil;
              };
              if ($truthy(idx['$zero?']())) {
              } else {
                _slim_controls4['$<<']("+")
              };
              _slim_controls4['$<<']("<kbd>");
              _slim_controls4['$<<'](key);
              return _slim_controls4['$<<']("</kbd>");}, $$171.$$s = self, $$171.$$arity = 2, $$171));
            return (_slim_controls4 = _slim_controls4.$join(""));}, $$170.$$s = self, $$170.$$arity = 0, $$170));
          _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, $$168.$$s = self, $$168.$$arity = 0, $$168));
    }, $Converter_inline_kbd$167.$$arity = -2);
    
    Opal.def(self, '$title_slide', $Converter_title_slide$172 = function $$title_slide(node, opts) {
      var $$173, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$173 = function(){var self = $$173.$$s || this, $a, _buf = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _title_obj = nil, _slice = nil, preamble = nil;
        if (self.header == null) self.header = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        bg_image = (function() {if ($truthy(self['$attr?']("title-slide-background-image"))) {
          
          return self.$image_uri(self.$attr("title-slide-background-image"));
        } else {
          return nil
        }; return nil; })();
        bg_video = (function() {if ($truthy(self['$attr?']("title-slide-background-video"))) {
          
          return self.$media_uri(self.$attr("title-slide-background-video"));
        } else {
          return nil
        }; return nil; })();
        _buf['$<<']("<section");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "title"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](" data-state=\"title\"");
        _slim_codeattributes2 = self.$attr("title-slide-transition");
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" data-transition")
          } else {
            
            _buf['$<<'](" data-transition=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes3 = self.$attr("title-slide-transition-speed");
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" data-transition-speed")
          } else {
            
            _buf['$<<'](" data-transition-speed=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes4 = self.$attr("title-slide-background");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" data-background")
          } else {
            
            _buf['$<<'](" data-background=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = self.$attr("title-slide-background-size");
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" data-background-size")
          } else {
            
            _buf['$<<'](" data-background-size=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes6 = bg_image;
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" data-background-image")
          } else {
            
            _buf['$<<'](" data-background-image=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes7 = bg_video;
        if ($truthy(_slim_codeattributes7)) {
          if (_slim_codeattributes7['$=='](true)) {
            _buf['$<<'](" data-background-video")
          } else {
            
            _buf['$<<'](" data-background-video=\"");
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes8 = self.$attr("title-slide-background-video-loop");
        if ($truthy(_slim_codeattributes8)) {
          if (_slim_codeattributes8['$=='](true)) {
            _buf['$<<'](" data-background-video-loop")
          } else {
            
            _buf['$<<'](" data-background-video-loop=\"");
            _buf['$<<'](_slim_codeattributes8);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes9 = self.$attr("title-slide-background-video-muted");
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" data-background-video-muted")
          } else {
            
            _buf['$<<'](" data-background-video-muted=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes10 = self.$attr("title-slide-background-opacity");
        if ($truthy(_slim_codeattributes10)) {
          if (_slim_codeattributes10['$=='](true)) {
            _buf['$<<'](" data-background-opacity")
          } else {
            
            _buf['$<<'](" data-background-opacity=\"");
            _buf['$<<'](_slim_codeattributes10);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes11 = self.$attr("title-slide-background-iframe");
        if ($truthy(_slim_codeattributes11)) {
          if (_slim_codeattributes11['$=='](true)) {
            _buf['$<<'](" data-background-iframe")
          } else {
            
            _buf['$<<'](" data-background-iframe=\"");
            _buf['$<<'](_slim_codeattributes11);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes12 = self.$attr("title-slide-background-color");
        if ($truthy(_slim_codeattributes12)) {
          if (_slim_codeattributes12['$=='](true)) {
            _buf['$<<'](" data-background-color")
          } else {
            
            _buf['$<<'](" data-background-color=\"");
            _buf['$<<'](_slim_codeattributes12);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes13 = self.$attr("title-slide-background-repeat");
        if ($truthy(_slim_codeattributes13)) {
          if (_slim_codeattributes13['$=='](true)) {
            _buf['$<<'](" data-background-repeat")
          } else {
            
            _buf['$<<'](" data-background-repeat=\"");
            _buf['$<<'](_slim_codeattributes13);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes14 = self.$attr("title-slide-background-position");
        if ($truthy(_slim_codeattributes14)) {
          if (_slim_codeattributes14['$=='](true)) {
            _buf['$<<'](" data-background-position")
          } else {
            
            _buf['$<<'](" data-background-position=\"");
            _buf['$<<'](_slim_codeattributes14);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes15 = self.$attr("title-slide-background-transition");
        if ($truthy(_slim_codeattributes15)) {
          if (_slim_codeattributes15['$=='](true)) {
            _buf['$<<'](" data-background-transition")
          } else {
            
            _buf['$<<'](" data-background-transition=\"");
            _buf['$<<'](_slim_codeattributes15);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
          
          _buf['$<<']("<h1>");
          _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
          _buf['$<<']("</h1><h2>");
          _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
          _buf['$<<']("</h2>");
        } else {
          
          _buf['$<<']("<h1>");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
        if ($truthy(($truthy($a = preamble['$nil?']()) ? $a : preamble.$length()['$=='](0)))) {
        } else {
          
          _buf['$<<']("<div class=\"preamble\">");
          _buf['$<<'](preamble.$pop().$content());
          _buf['$<<']("</div>");
        };
        _buf['$<<'](self.$generate_authors(self.document));
        _buf['$<<']("</section>");
        return (_buf = _buf.$join(""));}, $$173.$$s = self, $$173.$$arity = 0, $$173));
    }, $Converter_title_slide$172.$$arity = -2);
    
    Opal.def(self, '$embedded', $Converter_embedded$174 = function $$embedded(node, opts) {
      var $$175, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$175 = function(){var self = $$175.$$s || this, $a, $$176, _buf = nil, _slim_codeattributes1 = nil;
        if (self.id == null) self.id = nil;
        if (self.header == null) self.header = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = self.$notitle()) ? $a : self['$has_header?']()['$!']()))) {
        } else {
          
          _buf['$<<']("<h1");
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        _buf['$<<'](self.$content());
        if ($truthy(($truthy($a = self['$footnotes?']()['$!']()) ? $a : self['$attr?']("nofootnotes")))) {
        } else {
          
          _buf['$<<']("<div id=\"footnotes\"><hr>");
          $send(self.$footnotes(), 'each', [], ($$176 = function(fn){var self = $$176.$$s || this;

          
            
            if (fn == null) {
              fn = nil;
            };
            _buf['$<<']("<div class=\"footnote\" id=\"_footnote_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\"><a href=\"#_footnoteref_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\">");
            _buf['$<<'](fn.$index());
            _buf['$<<']("</a>. ");
            _buf['$<<'](fn.$text());
            return _buf['$<<']("</div>");}, $$176.$$s = self, $$176.$$arity = 1, $$176));
          _buf['$<<']("</div>");
        };
        return (_buf = _buf.$join(""));}, $$175.$$s = self, $$175.$$arity = 0, $$175));
    }, $Converter_embedded$174.$$arity = -2);
    
    Opal.def(self, '$paragraph', $Converter_paragraph$177 = function $$paragraph(node, opts) {
      var $$178, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$178 = function(){var self = $$178.$$s || this, $a, $$179, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["paragraph", self.$role(), (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$attr?']("step")))) {
          return "fragment"
        } else {
          return nil
        }; return nil; })()]}).$merge(self.$data_attrs(self.attributes))], ($$179 = function(){var self = $$179.$$s || this, _slim_controls2 = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          if ($truthy(self['$has_role?']("small"))) {
            
            _slim_controls2['$<<']("<small>");
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</small>");
          } else {
            
            _slim_controls2['$<<']("<p>");
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</p>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$179.$$s = self, $$179.$$arity = 0, $$179));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$178.$$s = self, $$178.$$arity = 0, $$178));
    }, $Converter_paragraph$177.$$arity = -2);
    
    Opal.def(self, '$olist', $Converter_olist$180 = function $$olist(node, opts) {
      var $$181, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], ($$181 = function(){var self = $$181.$$s || this, $$182, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["olist", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], ($$182 = function(){var self = $$182.$$s || this, $$183, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
          if (self.style == null) self.style = nil;

        
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");};
          _slim_controls2['$<<']("<ol");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = self.style;
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _slim_controls2['$<<'](" class=\"");
            _slim_controls2['$<<'](_temple_html_attributeremover1);
            _slim_controls2['$<<']("\"");};
          _slim_codeattributes2 = self.$attr("start");
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _slim_controls2['$<<'](" start")
            } else {
              
              _slim_controls2['$<<'](" start=\"");
              _slim_controls2['$<<'](_slim_codeattributes2);
              _slim_controls2['$<<']("\"");
            }};
          _slim_codeattributes3 = self.$list_marker_keyword();
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _slim_controls2['$<<'](" type")
            } else {
              
              _slim_controls2['$<<'](" type=\"");
              _slim_controls2['$<<'](_slim_codeattributes3);
              _slim_controls2['$<<']("\"");
            }};
          _slim_controls2['$<<'](">");
          $send(self.$items(), 'each', [], ($$183 = function(item){var self = $$183.$$s || this, $a, $b, _temple_html_attributeremover2 = nil, _slim_codeattributes4 = nil;

          
            
            if (item == null) {
              item = nil;
            };
            _slim_controls2['$<<']("<li");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes4 = (function() {if ($truthy(($truthy($a = ($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step"))) ? $a : self['$attr?']("step")))) {
              return "fragment"
            } else {
              return nil
            }; return nil; })();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
              
              _slim_codeattributes4 = _slim_codeattributes4.$flatten();
              $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes4.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes4)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover2);
              _slim_controls2['$<<']("\"");};
            _slim_controls2['$<<']("><p>");
            _slim_controls2['$<<'](item.$text());
            _slim_controls2['$<<']("</p>");
            if ($truthy(item['$blocks?']())) {
              _slim_controls2['$<<'](item.$content())};
            return _slim_controls2['$<<']("</li>");}, $$183.$$s = self, $$183.$$arity = 1, $$183));
          _slim_controls2['$<<']("</ol>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, $$182.$$s = self, $$182.$$arity = 0, $$182));
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, $$181.$$s = self, $$181.$$arity = 0, $$181));
    }, $Converter_olist$180.$$arity = -2);
    return (Opal.def(self, '$set_local_variables', $Converter_set_local_variables$184 = function $$set_local_variables(binding, vars) {
      var $$185, self = this;

      return $send(vars, 'each', [], ($$185 = function(key, val){var self = $$185.$$s || this;

      
        
        if (key == null) {
          key = nil;
        };
        
        if (val == null) {
          val = nil;
        };
        return binding.$local_variable_set(key.$to_sym(), val);}, $$185.$$s = self, $$185.$$arity = 2, $$185))
    }, $Converter_set_local_variables$184.$$arity = 2), nil) && 'set_local_variables';
  })($$$($$($nesting, 'Asciidoctor'), 'Revealjs'), $$$($$$($$$('::', 'Asciidoctor'), 'Converter'), 'Base'), $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "5.0.0.rc1")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/highlightjs"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$register_for', '$join', '$collect', '$split', '$[]', '$attributes', '$resolve_lines_to_highlight', '$content', '$merge', '$proc', '$[]=', '$-', '$attr', '$option?', '$key?', '$_convert_highlight_to_revealjs', '$==', '$attr?', '$map', '$lstrip']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'SyntaxHighlighter');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'HighlightJsAdapter');

          var $nesting = [self].concat($parent_nesting), $HighlightJsAdapter_initialize$1, $HighlightJsAdapter__convert_highlight_to_revealjs$2, $HighlightJsAdapter_format$4, $HighlightJsAdapter_docinfo$ques$6, $HighlightJsAdapter_docinfo$7;

          
          self.$register_for("highlightjs", "highlight.js");
          Opal.const_set($nesting[0], 'HIGHLIGHT_JS_VERSION', "10.7.3");
          
          Opal.def(self, '$initialize', $HighlightJsAdapter_initialize$1 = function $$initialize($a) {
            var $post_args, args, $iter = $HighlightJsAdapter_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $HighlightJsAdapter_initialize$1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, Opal.find_super_dispatcher(self, 'initialize', $HighlightJsAdapter_initialize$1, false), $zuper, $iter);
            return (self.name = (self.pre_class = "highlightjs"));
          }, $HighlightJsAdapter_initialize$1.$$arity = -1);
          
          Opal.def(self, '$_convert_highlight_to_revealjs', $HighlightJsAdapter__convert_highlight_to_revealjs$2 = function $$_convert_highlight_to_revealjs(node) {
            var $$3, self = this;

            return $send(node.$attributes()['$[]']("highlight").$split("|"), 'collect', [], ($$3 = function(linenums){var self = $$3.$$s || this;

            
              
              if (linenums == null) {
                linenums = nil;
              };
              return node.$resolve_lines_to_highlight(node.$content(), linenums).$join(",");}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$join("|")
          }, $HighlightJsAdapter__convert_highlight_to_revealjs$2.$$arity = 1);
          
          Opal.def(self, '$format', $HighlightJsAdapter_format$4 = function $$format(node, lang, opts) {
            var $$5, $iter = $HighlightJsAdapter_format$4.$$p, $yield = $iter || nil, self = this;

            if ($iter) $HighlightJsAdapter_format$4.$$p = null;
            return $send(self, Opal.find_super_dispatcher(self, 'format', $HighlightJsAdapter_format$4, false), [node, lang, opts.$merge($hash2(["transform"], {"transform": $send(self, 'proc', [], ($$5 = function(pre, code){var self = $$5.$$s || this, $a, $writer = nil, id = nil;

            
              
              if (pre == null) {
                pre = nil;
              };
              
              if (code == null) {
                code = nil;
              };
              
              $writer = ["class", "" + "language-" + (($truthy($a = lang) ? $a : "none")) + " hljs"];
              $send(code, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = ["data-noescape", true];
              $send(code, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy((id = node.$attr("data-id")))) {
                
                $writer = ["data-id", id];
                $send(pre, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(node['$option?']("trim"))) {
                
                $writer = ["data-trim", ""];
                $send(code, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(node.$attributes()['$key?']("highlight"))) {
                
                $writer = ["data-line-numbers", self.$_convert_highlight_to_revealjs(node)];
                $send(code, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(node.$attributes()['$key?']("linenums"))) {
                
                $writer = ["data-line-numbers", ""];
                $send(code, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };}, $$5.$$s = self, $$5.$$arity = 2, $$5))}))], null)
          }, $HighlightJsAdapter_format$4.$$arity = 3);
          
          Opal.def(self, '$docinfo?', $HighlightJsAdapter_docinfo$ques$6 = function(location) {
            var self = this;

            return location['$==']("footer")
          }, $HighlightJsAdapter_docinfo$ques$6.$$arity = 1);
          
          Opal.def(self, '$docinfo', $HighlightJsAdapter_docinfo$7 = function $$docinfo(location, doc, opts) {
            var $a, $$8, self = this, revealjsdir = nil, theme_href = nil, base_url = nil;

            
            if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$==']("opal")) ? $$($nesting, 'JAVASCRIPT_PLATFORM')['$==']("node") : $$($nesting, 'RUBY_ENGINE')['$==']("opal")))) {
              revealjsdir = doc.$attr("revealjsdir", "node_modules/reveal.js")
            } else {
              revealjsdir = doc.$attr("revealjsdir", "reveal.js")
            };
            if ($truthy(doc['$attr?']("highlightjs-theme"))) {
              theme_href = doc.$attr("highlightjs-theme")
            } else {
              theme_href = "" + (revealjsdir) + "/plugin/highlight/monokai.css"
            };
            base_url = doc.$attr("highlightjsdir", "" + (opts['$[]']("cdn_base_url")) + "/highlight.js/" + ($$($nesting, 'HIGHLIGHT_JS_VERSION')));
            return "" + "<link rel=\"stylesheet\" href=\"" + (theme_href) + "\"" + (opts['$[]']("self_closing_tag_slash")) + ">\n" + "<script src=\"" + (base_url) + "/highlight.min.js\"></script>\n" + ((function() {if ($truthy(doc['$attr?']("highlightjs-languages"))) {
              return $send(doc.$attr("highlightjs-languages").$split(","), 'map', [], ($$8 = function(lang){var self = $$8.$$s || this;

              
                
                if (lang == null) {
                  lang = nil;
                };
                return "" + "<script src=\"" + (base_url) + "/languages/" + (lang.$lstrip()) + ".min.js\"></script>\n";}, $$8.$$s = self, $$8.$$arity = 1, $$8)).$join()
            } else {
              return ""
            }; return nil; })()) + "\n" + "<script>\n" + ($$($nesting, 'HIGHLIGHT_PLUGIN_SOURCE')) + "\n" + "hljs.configure({\n" + "  ignoreUnescapedHTML: true,\n" + "});\n" + "hljs.highlightAll();\n" + "</script>";
          }, $HighlightJsAdapter_docinfo$7.$$arity = 3);
          return Opal.const_set($nesting[0], 'HIGHLIGHT_PLUGIN_SOURCE', "" + "\n" + "/* highlightjs-line-numbers.js 2.6.0 | (C) 2018 Yauheni Pakala | MIT License | github.com/wcoder/highlightjs-line-numbers.js */\n" + "/* Edited by Hakim for reveal.js; removed async timeout */\n" + "!function(n,e){\"use strict\";function t(){var n=e.createElement(\"style\");n.type=\"text/css\",n.innerHTML=g(\".{0}{border-collapse:collapse}.{0} td{padding:0}.{1}:before{content:attr({2})}\",[v,L,b]),e.getElementsByTagName(\"head\")[0].appendChild(n)}function r(t){\"interactive\"===e.readyState||\"complete\"===e.readyState?i(t):n.addEventListener(\"DOMContentLoaded\",function(){i(t)})}function i(t){try{var r=e.querySelectorAll(\"code.hljs,code.nohighlight\");for(var i in r)r.hasOwnProperty(i)&&l(r[i],t)}catch(o){n.console.error(\"LineNumbers error: \",o)}}function l(n,e){\"object\"==typeof n&&f(function(){n.innerHTML=s(n,e)})}function o(n,e){if(\"string\"==typeof n){var t=document.createElement(\"code\");return t.innerHTML=n,s(t,e)}}function s(n,e){e=e||{singleLine:!1};var t=e.singleLine?0:1;return c(n),a(n.innerHTML,t)}function a(n,e){var t=u(n);if(\"\"===t[t.length-1].trim()&&t.pop(),t.length>e){for(var r=\"\",i=0,l=t.length;i<l;i++)r+=g('<tr><td class=\"{0}\"><div class=\"{1} {2}\" {3}=\"{5}\"></div></td><td class=\"{4}\"><div class=\"{1}\">{6}</div></td></tr>',[j,m,L,b,p,i+1,t[i].length>0?t[i]:\" \"]);return g('<table class=\"{0}\">{1}</table>',[v,r])}return n}function c(n){var e=n.childNodes;for(var t in e)if(e.hasOwnProperty(t)){var r=e[t];h(r.textContent)>0&&(r.childNodes.length>0?c(r):d(r.parentNode))}}function d(n){var e=n.className;if(/hljs-/.test(e)){for(var t=u(n.innerHTML),r=0,i=\"\";r<t.length;r++){var l=t[r].length>0?t[r]:\" \";i+=g('<span class=\"{0}\">{1}</span>\\n',[e,l])}n.innerHTML=i.trim()}}function u(n){return 0===n.length?[]:n.split(y)}function h(n){return(n.trim().match(y)||[]).length}function f(e){e()}function g(n,e){return n.replace(/{(\\d+)}/g,function(n,t){return e[t]?e[t]:n})}var v=\"hljs-ln\",m=\"hljs-ln-line\",p=\"hljs-ln-code\",j=\"hljs-ln-numbers\",L=\"hljs-ln-n\",b=\"data-line-number\",y=/\\r\\n|\\r|\\n/g;n.hljs?(n.hljs.initLineNumbersOnLoad=r,n.hljs.lineNumbersBlock=l,n.hljs.lineNumbersValue=o,t()):n.console.error(\"highlight.js not detected!\")}(window,document);\n" + "\n" + "/**\n" + " * This reveal.js plugin is wrapper around the highlight.js\n" + " * syntax highlighting library.\n" + " */\n" + "(function( root, factory ) {\n" + "  if (typeof define === 'function' && define.amd) {\n" + "    root.RevealHighlight = factory();\n" + "  } else if( typeof exports === 'object' ) {\n" + "    module.exports = factory();\n" + "  } else {\n" + "    // Browser globals (root is window)\n" + "    root.RevealHighlight = factory();\n" + "  }\n" + "}( this, function() {\n" + "\n" + "  // Function to perform a better \"data-trim\" on code snippets\n" + "  // Will slice an indentation amount on each line of the snippet (amount based on the line having the lowest indentation length)\n" + "  function betterTrim(snippetEl) {\n" + "    // Helper functions\n" + "    function trimLeft(val) {\n" + "      // Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\n" + "      return val.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\n" + "    }\n" + "    function trimLineBreaks(input) {\n" + "      var lines = input.split('\\n');\n" + "\n" + "      // Trim line-breaks from the beginning\n" + "      for (var i = 0; i < lines.length; i++) {\n" + "        if (lines[i].trim() === '') {\n" + "          lines.splice(i--, 1);\n" + "        } else break;\n" + "      }\n" + "\n" + "      // Trim line-breaks from the end\n" + "      for (var i = lines.length-1; i >= 0; i--) {\n" + "        if (lines[i].trim() === '') {\n" + "          lines.splice(i, 1);\n" + "        } else break;\n" + "      }\n" + "\n" + "      return lines.join('\\n');\n" + "    }\n" + "\n" + "    // Main function for betterTrim()\n" + "    return (function(snippetEl) {\n" + "      var content = trimLineBreaks(snippetEl.innerHTML);\n" + "      var lines = content.split('\\n');\n" + "      // Calculate the minimum amount to remove on each line start of the snippet (can be 0)\n" + "      var pad = lines.reduce(function(acc, line) {\n" + "        if (line.length > 0 && trimLeft(line).length > 0 && acc > line.length - trimLeft(line).length) {\n" + "          return line.length - trimLeft(line).length;\n" + "        }\n" + "        return acc;\n" + "      }, Number.POSITIVE_INFINITY);\n" + "      // Slice each line with this amount\n" + "      return lines.map(function(line, index) {\n" + "        return line.slice(pad);\n" + "      })\n" + "        .join('\\n');\n" + "    })(snippetEl);\n" + "  }\n" + "\n" + "  var RevealHighlight = {\n" + "\n" + "    HIGHLIGHT_STEP_DELIMITER: '|',\n" + "    HIGHLIGHT_LINE_DELIMITER: ',',\n" + "    HIGHLIGHT_LINE_RANGE_DELIMITER: '-',\n" + "\n" + "    init: function( reveal ) {\n" + "\n" + "      // Read the plugin config options and provide fallbacks\n" + "      var config = Reveal.getConfig().highlight || {};\n" + "      config.highlightOnLoad = typeof config.highlightOnLoad === 'boolean' ? config.highlightOnLoad : true;\n" + "      config.escapeHTML = typeof config.escapeHTML === 'boolean' ? config.escapeHTML : true;\n" + "\n" + "      [].slice.call( reveal.getRevealElement().querySelectorAll( 'pre code' ) ).forEach( function( block ) {\n" + "\n" + "        block.parentNode.className = 'code-wrapper';\n" + "\n" + "        // Code can optionally be wrapped in script template to avoid\n" + "        // HTML being parsed by the browser (i.e. when you need to\n" + "        // include <, > or & in your code).\n" + "        let substitute = block.querySelector( 'script[type=\"text/template\"]' );\n" + "        if( substitute ) {\n" + "          // textContent handles the HTML entity escapes for us\n" + "          block.textContent = substitute.innerHTML;\n" + "        }\n" + "\n" + "        // Trim whitespace if the \"data-trim\" attribute is present\n" + "        if( block.hasAttribute( 'data-trim' ) && typeof block.innerHTML.trim === 'function' ) {\n" + "          block.innerHTML = betterTrim( block );\n" + "        }\n" + "\n" + "        // Escape HTML tags unless the \"data-noescape\" attrbute is present\n" + "        if( config.escapeHTML && !block.hasAttribute( 'data-noescape' )) {\n" + "          block.innerHTML = block.innerHTML.replace( /</g,\"&lt;\").replace(/>/g, '&gt;' );\n" + "        }\n" + "\n" + "        // Re-highlight when focus is lost (for contenteditable code)\n" + "        block.addEventListener( 'focusout', function( event ) {\n" + "          hljs.highlightElement( event.currentTarget );\n" + "        }, false );\n" + "\n" + "        if( config.highlightOnLoad ) {\n" + "          RevealHighlight.highlightBlock( block );\n" + "        }\n" + "      } );\n" + "\n" + "      // If we're printing to PDF, scroll the code highlights of\n" + "      // all blocks in the deck into view at once\n" + "      reveal.on( 'pdf-ready', function() {\n" + "        [].slice.call( reveal.getRevealElement().querySelectorAll( 'pre code[data-line-numbers].current-fragment' ) ).forEach( function( block ) {\n" + "          RevealHighlight.scrollHighlightedLineIntoView( block, {}, true );\n" + "        } );\n" + "      } );\n" + "    },\n" + "\n" + "    /**\n" + "     * Highlights a code block. If the <code> node has the\n" + "     * 'data-line-numbers' attribute we also generate slide\n" + "     * numbers.\n" + "     *\n" + "     * If the block contains multiple line highlight steps,\n" + "     * we clone the block and create a fragment for each step.\n" + "     */\n" + "    highlightBlock: function( block ) {\n" + "\n" + "      hljs.highlightElement( block );\n" + "\n" + "      // Don't generate line numbers for empty code blocks\n" + "      if( block.innerHTML.trim().length === 0 ) return;\n" + "\n" + "      if( block.hasAttribute( 'data-line-numbers' ) ) {\n" + "        hljs.lineNumbersBlock( block, { singleLine: true } );\n" + "\n" + "        var scrollState = { currentBlock: block };\n" + "\n" + "        // If there is at least one highlight step, generate\n" + "        // fragments\n" + "        var highlightSteps = RevealHighlight.deserializeHighlightSteps( block.getAttribute( 'data-line-numbers' ) );\n" + "        if( highlightSteps.length > 1 ) {\n" + "\n" + "          // If the original code block has a fragment-index,\n" + "          // each clone should follow in an incremental sequence\n" + "          var fragmentIndex = parseInt( block.getAttribute( 'data-fragment-index' ), 10 );\n" + "\n" + "          if( typeof fragmentIndex !== 'number' || isNaN( fragmentIndex ) ) {\n" + "            fragmentIndex = null;\n" + "          }\n" + "\n" + "          // Generate fragments for all steps except the original block\n" + "          highlightSteps.slice(1).forEach( function( highlight ) {\n" + "\n" + "            var fragmentBlock = block.cloneNode( true );\n" + "            fragmentBlock.setAttribute( 'data-line-numbers', RevealHighlight.serializeHighlightSteps( [ highlight ] ) );\n" + "            fragmentBlock.classList.add( 'fragment' );\n" + "            block.parentNode.appendChild( fragmentBlock );\n" + "            RevealHighlight.highlightLines( fragmentBlock );\n" + "\n" + "            if( typeof fragmentIndex === 'number' ) {\n" + "              fragmentBlock.setAttribute( 'data-fragment-index', fragmentIndex );\n" + "              fragmentIndex += 1;\n" + "            }\n" + "            else {\n" + "              fragmentBlock.removeAttribute( 'data-fragment-index' );\n" + "            }\n" + "\n" + "            // Scroll highlights into view as we step through them\n" + "            fragmentBlock.addEventListener( 'visible', RevealHighlight.scrollHighlightedLineIntoView.bind( Plugin, fragmentBlock, scrollState ) );\n" + "            fragmentBlock.addEventListener( 'hidden', RevealHighlight.scrollHighlightedLineIntoView.bind( Plugin, fragmentBlock.previousSibling, scrollState ) );\n" + "\n" + "          } );\n" + "\n" + "          block.removeAttribute( 'data-fragment-index' )\n" + "          block.setAttribute( 'data-line-numbers', RevealHighlight.serializeHighlightSteps( [ highlightSteps[0] ] ) );\n" + "\n" + "        }\n" + "\n" + "        // Scroll the first highlight into view when the slide\n" + "        // becomes visible. Note supported in IE11 since it lacks\n" + "        // support for Element.closest.\n" + "        var slide = typeof block.closest === 'function' ? block.closest( 'section:not(.stack)' ) : null;\n" + "        if( slide ) {\n" + "          var scrollFirstHighlightIntoView = function() {\n" + "            RevealHighlight.scrollHighlightedLineIntoView( block, scrollState, true );\n" + "            slide.removeEventListener( 'visible', scrollFirstHighlightIntoView );\n" + "          }\n" + "          slide.addEventListener( 'visible', scrollFirstHighlightIntoView );\n" + "        }\n" + "\n" + "        RevealHighlight.highlightLines( block );\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Animates scrolling to the first highlighted line\n" + "     * in the given code block.\n" + "     */\n" + "    scrollHighlightedLineIntoView: function( block, scrollState, skipAnimation ) {\n" + "\n" + "      cancelAnimationFrame( scrollState.animationFrameID );\n" + "\n" + "      // Match the scroll position of the currently visible\n" + "      // code block\n" + "      if( scrollState.currentBlock ) {\n" + "        block.scrollTop = scrollState.currentBlock.scrollTop;\n" + "      }\n" + "\n" + "      // Remember the current code block so that we can match\n" + "      // its scroll position when showing/hiding fragments\n" + "      scrollState.currentBlock = block;\n" + "\n" + "      var highlightBounds = RevealHighlight.getHighlightedLineBounds( block )\n" + "      var viewportHeight = block.offsetHeight;\n" + "\n" + "      // Subtract padding from the viewport height\n" + "      var blockStyles = getComputedStyle( block );\n" + "      viewportHeight -= parseInt( blockStyles.paddingTop ) + parseInt( blockStyles.paddingBottom );\n" + "\n" + "      // Scroll position which centers all highlights\n" + "      var startTop = block.scrollTop;\n" + "      var targetTop = highlightBounds.top + ( Math.min( highlightBounds.bottom - highlightBounds.top, viewportHeight ) - viewportHeight ) / 2;\n" + "\n" + "      // Account for offsets in position applied to the\n" + "      // <table> that holds our lines of code\n" + "      var lineTable = block.querySelector( '.hljs-ln' );\n" + "      if( lineTable ) targetTop += lineTable.offsetTop - parseInt( blockStyles.paddingTop );\n" + "\n" + "      // Make sure the scroll target is within bounds\n" + "      targetTop = Math.max( Math.min( targetTop, block.scrollHeight - viewportHeight ), 0 );\n" + "\n" + "      if( skipAnimation === true || startTop === targetTop ) {\n" + "        block.scrollTop = targetTop;\n" + "      }\n" + "      else {\n" + "\n" + "        // Don't attempt to scroll if there is no overflow\n" + "        if( block.scrollHeight <= viewportHeight ) return;\n" + "\n" + "        var time = 0;\n" + "        var animate = function() {\n" + "          time = Math.min( time + 0.02, 1 );\n" + "\n" + "          // Update our eased scroll position\n" + "          block.scrollTop = startTop + ( targetTop - startTop ) * RevealHighlight.easeInOutQuart( time );\n" + "\n" + "          // Keep animating unless we've reached the end\n" + "          if( time < 1 ) {\n" + "            scrollState.animationFrameID = requestAnimationFrame( animate );\n" + "          }\n" + "        };\n" + "\n" + "        animate();\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * The easing function used when scrolling.\n" + "     */\n" + "    easeInOutQuart: function( t ) {\n" + "\n" + "      // easeInOutQuart\n" + "      return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t;\n" + "\n" + "    },\n" + "\n" + "    getHighlightedLineBounds: function( block ) {\n" + "\n" + "      var highlightedLines = block.querySelectorAll( '.highlight-line' );\n" + "      if( highlightedLines.length === 0 ) {\n" + "        return { top: 0, bottom: 0 };\n" + "      }\n" + "      else {\n" + "        var firstHighlight = highlightedLines[0];\n" + "        var lastHighlight = highlightedLines[ highlightedLines.length -1 ];\n" + "\n" + "        return {\n" + "          top: firstHighlight.offsetTop,\n" + "          bottom: lastHighlight.offsetTop + lastHighlight.offsetHeight\n" + "        }\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Visually emphasize specific lines within a code block.\n" + "     * This only works on blocks with line numbering turned on.\n" + "     *\n" + "     * @param {HTMLElement} block a <code> block\n" + "     * @param {String} [linesToHighlight] The lines that should be\n" + "     * highlighted in this format:\n" + "     * \"1\" \t\t= highlights line 1\n" + "     * \"2,5\"\t= highlights lines 2 & 5\n" + "     * \"2,5-7\"\t= highlights lines 2, 5, 6 & 7\n" + "     */\n" + "    highlightLines: function( block, linesToHighlight ) {\n" + "\n" + "      var highlightSteps = RevealHighlight.deserializeHighlightSteps( linesToHighlight || block.getAttribute( 'data-line-numbers' ) );\n" + "\n" + "      if( highlightSteps.length ) {\n" + "\n" + "        highlightSteps[0].forEach( function( highlight ) {\n" + "\n" + "          var elementsToHighlight = [];\n" + "\n" + "          // Highlight a range\n" + "          if( typeof highlight.end === 'number' ) {\n" + "            elementsToHighlight = [].slice.call( block.querySelectorAll( 'table tr:nth-child(n+'+highlight.start+'):nth-child(-n+'+highlight.end+')' ) );\n" + "          }\n" + "          // Highlight a single line\n" + "          else if( typeof highlight.start === 'number' ) {\n" + "            elementsToHighlight = [].slice.call( block.querySelectorAll( 'table tr:nth-child('+highlight.start+')' ) );\n" + "          }\n" + "\n" + "          if( elementsToHighlight.length ) {\n" + "            elementsToHighlight.forEach( function( lineElement ) {\n" + "              lineElement.classList.add( 'highlight-line' );\n" + "            } );\n" + "\n" + "            block.classList.add( 'has-highlights' );\n" + "          }\n" + "\n" + "        } );\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Parses and formats a user-defined string of line\n" + "     * numbers to highlight.\n" + "     *\n" + "     * @example\n" + "     * RevealHighlight.deserializeHighlightSteps( '1,2|3,5-10' )\n" + "     * // [\n" + "     * //   [ { start: 1 }, { start: 2 } ],\n" + "     * //   [ { start: 3 }, { start: 5, end: 10 } ]\n" + "     * // ]\n" + "     */\n" + "    deserializeHighlightSteps: function( highlightSteps ) {\n" + "\n" + "      // Remove whitespace\n" + "      highlightSteps = highlightSteps.replace( /\\s/g, '' );\n" + "\n" + "      // Divide up our line number groups\n" + "      highlightSteps = highlightSteps.split( RevealHighlight.HIGHLIGHT_STEP_DELIMITER );\n" + "\n" + "      return highlightSteps.map( function( highlights ) {\n" + "\n" + "        return highlights.split( RevealHighlight.HIGHLIGHT_LINE_DELIMITER ).map( function( highlight ) {\n" + "\n" + "          // Parse valid line numbers\n" + "          if( /^[\\d-]+$/.test( highlight ) ) {\n" + "\n" + "            highlight = highlight.split( RevealHighlight.HIGHLIGHT_LINE_RANGE_DELIMITER );\n" + "\n" + "            var lineStart = parseInt( highlight[0], 10 ),\n" + "              lineEnd = parseInt( highlight[1], 10 );\n" + "\n" + "            if( isNaN( lineEnd ) ) {\n" + "              return {\n" + "                start: lineStart\n" + "              };\n" + "            }\n" + "            else {\n" + "              return {\n" + "                start: lineStart,\n" + "                end: lineEnd\n" + "              };\n" + "            }\n" + "\n" + "          }\n" + "          // If no line numbers are provided, no code will be highlighted\n" + "          else {\n" + "\n" + "            return {};\n" + "\n" + "          }\n" + "\n" + "        } );\n" + "\n" + "      } );\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Serializes parsed line number data into a string so\n" + "     * that we can store it in the DOM.\n" + "     */\n" + "    serializeHighlightSteps: function( highlightSteps ) {\n" + "\n" + "      return highlightSteps.map( function( highlights ) {\n" + "\n" + "        return highlights.map( function( highlight ) {\n" + "\n" + "          // Line range\n" + "          if( typeof highlight.end === 'number' ) {\n" + "            return highlight.start + RevealHighlight.HIGHLIGHT_LINE_RANGE_DELIMITER + highlight.end;\n" + "          }\n" + "          // Single line\n" + "          else if( typeof highlight.start === 'number' ) {\n" + "            return highlight.start;\n" + "          }\n" + "          // All lines\n" + "          else {\n" + "            return '';\n" + "          }\n" + "\n" + "        } ).join( RevealHighlight.HIGHLIGHT_LINE_DELIMITER );\n" + "\n" + "      } ).join( RevealHighlight.HIGHLIGHT_STEP_DELIMITER );\n" + "\n" + "    }\n" + "\n" + "  }\n" + "\n" + "  Reveal.registerPlugin( 'highlight', RevealHighlight );\n" + "\n" + "  return RevealHighlight;\n" + "\n" + "}));\n" + "        ");
        })($nesting[0], $$$($$$($$($nesting, 'Asciidoctor'), 'SyntaxHighlighter'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("asciidoctor-revealjs/converter");
    self.$require("asciidoctor-revealjs/version");
    return self.$require("asciidoctor-revealjs/highlightjs");
  } else {
    return nil
  }
})(Opal);

  }

  var mainModule

  function resolveModule () {
    if (!mainModule) {
      checkAsciidoctor()
      initialize(Opal)
      mainModule = Opal.const_get_qualified(Opal.Asciidoctor, 'Revealjs')
    }
    return mainModule
  }

  function checkAsciidoctor () {
    if (typeof Opal.Asciidoctor === 'undefined') {
      throw new TypeError('Asciidoctor.js is not loaded')
    }
  }

  /**
   * @return {string} Version of this extension.
   */
  function getVersion () {
    return resolveModule().$$const.VERSION.toString()
  }

  /**
   * Registers the reveal.js converter.
   */
  function register () {
    return resolveModule()
  }

  var facade = {
    getVersion: getVersion,
    register: register,
  }

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = facade
  }
  return facade
})(Opal);
